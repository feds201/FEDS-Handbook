{"/CAD/3D+Printing/Index":{"title":"Index","data":{"introduction#Introduction:":"","well-well-well#Well well well,":"The hardest part about CAD is not CAD - some idiot"}},"/CAD/3D+Printing/Operation":{"title":"Operation","data":{"introduction#Introduction:":"","well-well-well#Well well well,":"The hardest part about CAD is not CAD - some idiot"}},"/CAD/3D+Printing/Slicing":{"title":"Slicing","data":{"introduction#Introduction:":"","well-well-well#Well well well,":"The hardest part about CAD is not CAD - some idiot"}},"/CAD/CNC/Fusion+360/Import":{"title":"Import","data":{}},"/CAD/CNC/Fusion+360/Index":{"title":"Index","data":{}},"/CAD/CNC/Fusion+360/Manufacturing":{"title":"Manufacturing","data":{}},"/CAD/CNC/Fusion+360/MaterialRules":{"title":"Materialrules","data":{}},"/CAD/CNC/Fusion+360/Posting":{"title":"Posting","data":{}},"/CAD/CNC/Fusion+360/Run":{"title":"Run","data":{}},"/CAD/CNC/Index":{"title":"Index","data":{}},"/CAD/CNC/Operation":{"title":"Operation","data":{}},"/CAD/Design/Brainstorming+Designs":{"title":"Brainstorming+designs","data":{"brainstorming-designs#Brainstorming Designs":"If you happen to have these questions:\nHow do I go from a blank slate to a working design? How do I find the most effective design? Where do I even start?\nFear not fellow reader, I'm going to go through the full process of how we create designs!","team--robot-goals#Team & Robot Goals":"Before kickoff, the team sits down and comes up with the goals for the team for the coming season. For this lesson we are specifically focusing on the team goal for the robot, which in the case of the 2024 season, was to make a world's competing robot. This sets the standard for what the overall aim of the design should head towards.As soon as the game for the new season is announced, the team gets to work learning the rules and coming up with strategy. Through the course of 2 days, scouting comes up with the robot goals that they believe must be achieved in order to meet the team goal of being a world's competing robot.\nIf you want to know more about how scouting comes up with the strategy, checkout their page about the development of the robot goals. (Link here)\nIt is imperative that all CAD students know the rules to a great degree (knowing the rules beforehand can save a lot of design time), and hammer the team & robot goals to heart. You can't make a world's winning robot if you don't believe you can.You probably have noticed that I use both robot goals & robot constraints throughout the CAD documentation. Those 2 terms are not interchangeable! Robot goals is what the team believes the robot should be able to perform within the game in order to accomplish the team goal. Robot constraints is what the robot must absolutely be able to do in order to meet a robot goal. Here's two examples:Robot Goal 1: The robot must be able to do 4 - 6 cycles per match.\nRobot Constraint 1a: The robot must have a travel speed of ≥ 1.2 m/s\nRobot Constraint 1b: The robot must be able to pick up note within 5 seconds\nRobot Constraint 1c: The robot must be able to score on average within 6 seconds.\nIn this example you can see that a goal is more of a vision for what the robot should be able to do, while the constraint is what the robot must have in order to accomplish the goal. Notice how relaxed the constraints for this goal are. These relationships can get more complex as the goals get more ambitious:Robot Goal 2: The robot must be able to do 10 - 12 cycles per match\nRobot Constraint 2a: The robot must be swerve drive (To accomplish the travel path, it is necessary)\nRobot Constraint 2b: The robot must have a travel speed of ≥ 2.7 m/s\nRobot Constraint 2c: The robot total weight must be < 115lb (For faster acceleration)\nRobot Constraint 2d: The robot structure height cannot exceed 32in (To be able to drive under the stage)\nRobot Constraint 2e: The robot must be < 28 x 28 in (To be able to drive under the stage)\nRobot Constraint 2f: The robot must be able to pick up a note within 1.5 seconds\nRobot Constraint 2g: The robot must be able to score on average within 2 seconds\nPhew! See how many more constraints you need as the goals get more ambitious?CAD's job is to figure out what constraints are necessary to accomplish the robot goal's set by scouting & the rest of the team. It is also important to voice concerns to the team if the constraints necessary to accomplish such a feat could impact the design time of the robot / could be out of the scope of the team.As soon as the goals and constraints for the robot are put in place, it's now time for CAD to get to work creating designs that fit the constraints that were agreed upon.","ap-research#AP Research":"As boring as it may sound, all designs start with a little research. Based on the given constraints your job as a designer is to figure out something that accomplishes the constraints set by the team. This is where experience really outshines anything else. By being observant of other robots at competitions in the past, you develop a sense of knowing what kind of mechanisms and different solutions other teams have developed over the years for problems that you may similarly be facing. Of course, there are resources to help you out as well:\nFUN Robotics Network\nFRC Design\nBlue Alliance\nGlobal CAD Collection\nSpectrum CAD Collection\nAnything from any other team's websites (I find team 254's season handbooks very useful)\nSimply just watching matches from previous years that match similar tasks that you have to find a solution to\nOnce you find a few robots for inspiration, try to see if there are CAD models for that specific robot. Chef's kiss if there is cuz you know exactly what happens next:\nhippity hoppity, ur CAD is now my property\nUsing the designs you find, this is where prototyping comes into play to check the feasibility of the design.","trade-study#Trade Study":"(This section will be updated for the new method this season)Generally after the prototyping phase is over, we immediately move into the rating phase where we put all the mechanisms that we want to compare into a table with categories to rate from 1 to 5.After completing the trade study, the final design direction is chosen and CAD begins the grind."}},"/CAD/Design/Design+Sense":{"title":"Design Sense:","data":{"":"The entire design portion of CAD can basically be summed up with one term: Design Sense. It's a term I came up with after the monstrosity of a season we had in 2023. Here what Sophomore me had to say about it (copied from the 2023 recap):\n\"We didn’t know what parts to use to create what we thought of. We didn’t know how to attach the parts or if there would be any interference with them. There were just so many unknowns when we were cadding the robot up that we just assumed things would work out until we actually saw the problem when mechanical asked us questions about the model. I like to call this skill “Design sense,” which is the ability to understand how a part works and manipulate the part to attach to anything. We were heavily lacking in that category, and I think in large part it had to do with the fact that me and Arya were both first-year leads in CAD.\"\nNow that I'm more experienced I have a better definition. It involves these 4 basic principles in the design world:\nDesign Thinking: This is a problem-solving approach that focuses on understanding design constraints, brainstorming solutions, and creating efficient, constraint-centered designs.\nSystems Thinking: This involves considering all the interconnected parts of a system and how they influence one another. It's about seeing the \"big picture\" and anticipating how changes in one area will impact the rest.\nStrategic Planning: This involves setting goals, collaboration, and planning steps carefully to ensure efficient use of time and resources while accounting for potential challenges.\nEngineering Design Process: This refers to the iterative approach of planning, designing, testing, and refining solutions to a problem.\nDesign sense refers to the ability for a person to effectively combine these 4 skills. In other words,\nDesign sense is the skill to effectively design a solution to a given problem by accounting for all possible external influences.\nWhile your reading these docs, keep in mind that each lesson is designed to help you understand more about each one of these principles. However, combining them all together is something that I believe only comes with experience. The more you design, the more mistakes you make—the more you'll begin to understand the difficulty in combining these principles together. As you get better overtime, the goal is to be able to perfect your skills in all 4."}},"/CAD/Design/Material+Guide":{"title":"Material Guide","data":{"":"Polycarbonate 1/16, 1/8, 1/4, 1/2, Steel, Aluminium 1/16, 1/8, 1/4, PLA, ABS, PETG, Carbon fiber Nylon, TPU,Include ideal CNC settings / Print settingsInclude usages for each material"}},"/CAD/Design/Mechanical+Advantage":{"title":"Mechanical+advantage","data":{"":"(will be updated after this season)"}},"/CAD/Design/Space+Claims":{"title":"Space+claims","data":{"":"(will be updated after this season since this is a first for CAD)"}},"/CAD/Design/Subgroup+Collaboration":{"title":"Subgroup+collaboration","data":{"subgroup-collaboration#Subgroup Collaboration":"The CAD for the robot actually involves the entire team. Every subgroup has something to do with the robot, and it's the job of CAD to ensure that all subgroups needs are met or compromised on.","mechanical--machining#Mechanical / Machining":"These guys suffer the burden of being the ones unlucky enough to build our designs.\nThese guys are the ones who happily build our most amazing designs! It's extremely important to ensure proper communication between both subgroups as the core build of the robot is dependent on the effective communication of the 2 subgroups. Here's a perfect video that explains the relationship between designers and machinists:\nTo sum up that video, for us what is most important is creating designs that our build team can physically make. Keep designs simple, and easy to assemble. To create a design that adheres to mechanical's build standards, we have to follow a few guidelines:\nTolerances must be ≥ 1/8in unless ABSOLUTELY NECESSARY. (Perhaps consider utilizing a factory edge if possible)\nIf the part you are designing has measurements that aren't on a tape measure, the part is too complicated.\nConsider what parts are better off with machining vs parts that could be better off with more accurate methods like CNC & 3D Printing\nEnsure any hole sizes are matching the tap sizes on the standardized chart.\nIt's important to keep designs realistic to the build capacity of the team to ensure faster and more efficient use of time during the limited weeks we have to complete a robot. Any delays just hurt the other processes of the robot build.","electrical#Electrical":"The electrical board is easily the most annoying part of the entire design. Having a student dedicated to just the board is absolutely necessary to keep the sanity of everyone else. That person would act as the representative for electrical to imagine the cable outings and claiming spaces where electrical deems is needed for wires/componenets.Based on the required sensors/motors the electrical board can easily be changed, causing a lot of time waste. It's important to have a list of what electronics are being used on the robot beforehand to keep the design moving fast.When designing the electrical board it's important to keep these questions in your head:\nCan a wire connector fit in this area?\nWill there be any interference with the routing of these wires?\nCan the wires bend in a proper angle without creating too much stress on the component?\nIs there easy access to the electrical component?\nThinking of everything earlier can save plenty of time like mentioned in the previous doc.","programming#Programming":"Probably the most neglected part of the design process... Yeah... we kind of just forgot about programming sometimes. All sensors & cameras are decided by programming and is the job of CAD to get the right angles and placements required for programming's needs.\nPro tip: you can constrain sketches to 3d parts like in this case to show the FOV of the camera to help with planning\nRight after coming up with the structure of the robot, the next step is to figure out what programming needs and where everything needs to be placed. Our 2024 season left me clueless as to where to place the limelights that we were planning on using, and as a result programming gave me a lot of headaches.\nDon't forget to think of openings for cooling fans, accessibility for any wires, and any exhaust cutouts for airflow","pc#P&C":"Towards the end of the design process, the fun begins with figuring out the overall color scheme and the sponsor panels. This is my favorite part since this is where we get to make the robot look cool!Checkout the CAD recaps to see the cool designs!","scouting#Scouting":"Checkout the Brainstorming designs page to learn more about what scouting does for CAD"}},"/CAD/Design/Think+of+Everything":{"title":"Think of Everything","data":{"the-problem#The Problem":"Rather than yapping about theory, lets see what \"Thinking of Everything\" means in an actual example. While you are reading through this example, follow along and put yourself in the shoes of a designer trying to solve this problem.Meet Dora, the robot we never talk about. Even if you know the fate of Dora, just go along with this example. Dora currently has a 4 bar mechanism intake, that is designed to pick both cones and cubes as seen below:Assume that the geometry does indeed work out where the cone and cube can be intaked in (which it did). Your goal here is to figure out how to power those wheels.\r\nThere are also going to be chains in that area to power the actuation of the intake, with the axle that does the actuating going through the entire robot at the bottom in the main frame.Since you have to suck game pieces in, you know the rotation of the wheels are in those directions. Thats pretty much all the information you get. How would you design a way to power these wheels? Scroll down to see how I did it.","my-solution#My Solution":"There was only 2 practical ways of going about actuating those wheels. Either you have the motor attatched to the frame of the robot and then belt it to the wheels following the path of the intake, like this 4 bar from team 254's 2022 robot:\r\nor you keep the motor on the intake and power the wheels directly, like from team 118's 2022 robot:Given the complexity of the 4 bar mechanism I designed, routing a belt through the arms would prove to be a significant challenge. I therefore decided to go with team 118's approach to attaching a motor to the actual intake to reduce the build complexity for the mechanical team (the team has never done belts ever before this).So the first thing I did was of course, copy what I could from team 118's robot, and I came up with a simple design where the motor would slide into the motor mount, and it would clip onto one of the frames on the robot. There's only one problem, while everything looks all great in CAD, this motor mount makes absolutely no sense. A motor has screw holes to attach it to something, and I'm clearly missing those! Ok, lets do a second revision.\n(I pulled the motor out, but it would still be in that original position touching the middle wall. I just pulled out in the CAD to show you guys how it would work.)\nOk cool, so now that we got those mount holes in for the motor, lets attach it to the robot!Well, this is a problem. Its currently just freely spinning on one screw pinning the motor mount to the arm frame. We should probably add support screws to hold it in place. Ok lets do a 3rd revision!Ok great, we now have the motor mount officially attached to the arm! However, when you printed it out and actually tested it in real life, you noticed that when you put it on the arm, the entire mount started sagging. It was only a slight sag, however once you chained up the mount, the entire mount snapped!While the motors were driving the wheels, the torque force applied on the motor caused the snap to occur on the purple line! (The yellow lines show where the stress was) Sigh, lets do a 4th revision.You eagerly get this mount printed and assemble it onto to the robot, only to see it break in the exact same spot again.... UGHHHHHH. WHYYYYYYYY ARE THERE MORE REVISIONS???? WHEN WILL THIS EVER END???\nWe ended up doing 11 revision of one singular motor mount. We wasted a week and a half on just one part. One part. WE WASTED 20% OF BUILD SEASON ON ONE PART. Alright, so we eventually did figure out the final design.Notice the motor holes on the very front of the motor mount. That lesson that I learned was the most important of all. When we had the motor holes on just the middle wall to attach to the motor, I never thought for a second how someone from mechanical would screw those screws into the motor. Like scroll up to the picture and think for yourself. I had to add those holes at the top so they could put a long Allen key through the front hole to screw in the motor holes from the top.This was the final result of 11 revisions, printed from carbon fiber nylon. Truly one overkill of a part that if designed better, could've saved so much time and money. Which brings me to the whole point of this example.In that example, if I simply took the time to just think of all the mounting, torque forces, and stress on the mount.... Think of the amount of time and money I could've saved. 3D printing things takes time, and filament does not grow from trees. You have to think of everything that effects your part, and create a part that meets as many criteria for a successful part as possible.\nIt's impractical to believe you can make a perfect part first try. Truth is no one expects you to. There's simply too many variables to account for to realistically make a perfect part. Your goal is not to have 0 revisions, it's simply to minimize the amount of revisions for your part to save time and money.\nSo you're probably like: \"Ok Sukhesh, cool dude, it would be really convenient if you could just give me a list of what to look out for\". While i wish I could do that, every situation that you may design a part for has a different environment which has different variables that effect the design. What I can give you however, is a general list of what to check for (Kind of like a checklist).","the-infamous-checklist#The Infamous Checklist":"Check for connections : Any screw holes, mounting holes, anything where your part connects to something else.\nDoes that thing connecting to my part make any sense?\nMake sure it's buildable : Can mechanical actually assemble the parts with whatever needs to go on there? Is there easy access for someone's hand to fit through a place necessary to assemble the part? Check if tools can fit in areas where it needs to be used.\nIs this a part that I could assemble myself?\nWhere do the wires go? : If your part requires wiring to some component, imagine the path the wires will take. Is there space to fit the wires, will it not get in the way of anything? Is the component in an easy access location to wire?\nIs this part designed where even I could even wire the component?\nCheck for interference : Put your model into whatever assembly it will eventually attach to. Check to see if any other parts in the assembly have the chance of interfering with the part and the stuff it is connected to. Don't forget to check if it will interfere with any wires!\nCan I assemble this part and leave it on the robot without having any worries of external influences?\nThink of external influences : No I don't mean interference within our own robot. I mean from other robots, field elements, the literal field. Could this part or anything connected to it be damaged? Will there be a considerable amount of wear?\nCan this part realistically last through an entire competition without needing any repair/replacement?\nFEA analysis: Not required, however, using FEA can help predict a lot of failures that you might have that you cannot physically predict. You can test stress forces on your part, simulate motor forces, collisions, and pretty much anything you can think of. It's like putting your part in a test chamber to endure through lab tests. If it comes out of the test passing with flying colors, you know your part has been engineered to the most efficient degree.\nIs this a part that has complicated variables where FEA would be shed light onto the doubts of my design?\nPeer review: I'll cover more about this in the collaboration section, but ensure you get someone from the subgroups that are involved with your part, and have them give approval for the design.\nOur job is to cater the design to their needs. If they feel nervous about anything on the design, its always better to put in the extra effort of fixing the root of the problem, rather than having it linger through all of build season and having other subgroups band-aid the problem.\nIf you manage to go through all those steps faithfully, I can guarantee with a 100% certainty that the part you designed is basically done. (I said FAITHFULLY following the steps)"}},"/CAD/FEA/Index":{"title":"Index","data":{}},"/CAD/FEA/Inspire/Index":{"title":"Index","data":{}},"/CAD/FEA/Inspire/Materials":{"title":"Materials","data":{}},"/CAD/FEA/Inspire/MotionAnalysis/Actuators&Motors":{"title":"Actuators&motors","data":{}},"/CAD/FEA/Inspire/MotionAnalysis/Contacts":{"title":"Contacts","data":{}},"/CAD/FEA/Inspire/MotionAnalysis/Joints":{"title":"Joints","data":{}},"/CAD/FEA/Inspire/MotionAnalysis/Motion":{"title":"Motion","data":{}},"/CAD/FEA/Inspire/MotionAnalysis/RigidGrouping":{"title":"Rigidgrouping","data":{}},"/CAD/FEA/Inspire/MotionAnalysis/Run+Settings":{"title":"Run+settings","data":{}},"/CAD/FEA/Inspire/MotionAnalysis/Structure":{"title":"Structure","data":{}},"/CAD/FEA/Inspire/StaticAnalysis/Connectors":{"title":"Connectors","data":{}},"/CAD/FEA/Inspire/StaticAnalysis/Contacts":{"title":"Contacts","data":{}},"/CAD/FEA/Inspire/StaticAnalysis/Loads":{"title":"Loads","data":{}},"/CAD/FEA/Inspire/StaticAnalysis/Run+Settings":{"title":"Run+settings","data":{}},"/CAD/FEA/Inspire/StaticAnalysis/Shape+Controls":{"title":"Shape+controls","data":{}},"/CAD/FEA/Inspire/UI":{"title":"UI","data":{}},"/CAD/FEA/Post+Analysis/Index":{"title":"Index","data":{}},"/CAD/FEA/Post+Analysis/Optimization/DesignSpaces":{"title":"Designspaces","data":{}},"/CAD/FEA/Post+Analysis/Optimization/InspireSolvers":{"title":"Inspiresolvers","data":{}},"/CAD/FEA/Post+Analysis/Optimization/MultiLoadOptimization":{"title":"Multiloadoptimization","data":{}},"/CAD/FEA/Post+Analysis/Optimization/Objectives":{"title":"Objectives","data":{}},"/CAD/FEA/Post+Analysis/Optimization/OptimizationTypes":{"title":"Optimizationtypes","data":{}},"/CAD/FEA/Post+Analysis/Optimization/PolyNURBS":{"title":"Polynurbs","data":{}},"/CAD/Introduction":{"title":"Introduction","data":{"":"You poor, unfortunate soul, you've stumbled into the grim void that is CAD—a barren wasteland of creativity where ideas are shackled to an unforgiving grid. Every curve, every line, every dimension is a cold calculation, drained of life and stripped of humanity. Hours blur together as you drag your soul through endless revisions, watching inspiration crumble into monotony, one extrude command at a time.\nSounds scary right? That will be a reality to any CAD student who doesn't have one very important trait: Patience.You see, designers live on the love-hate relationship between ourselves and our designs. It's not a simple as drawing a few lines and making a part. Here's an easy way to think about what designers do:\nImagine building an entire robot from scratch by yourself with no drawings. Everything you build is with your own imagination limited only to constraints set by team goals. Now, imagine building that robot from a screen equipped with a keyboard and mouse, oh and of course a couple of monsters on the side.\nEvery measurement, cutout on a piece, bearing, spacer, down to each individual screw and rivet, was planned by someone in CAD. You can now probably imagine why CAD is not for everyone.CAD demands an ability to endure countless adjustments, troubleshoot inexplicable errors, and navigate through layers of complexity without losing focus. It's a slow grind where precision outweighs speed, and the smallest mistake can unravel hours of meticulous work.Patience turns frustration into perseverance and keeps the process moving forward.Basically what I'm trying to say is that as you go through these docs for CAD, keep in mind that every time you fail, every constrain or extrude error you may come across—it's all part of the natural process of learning CAD. Even with the experience that I've had (4 years of CAD now), I still encounter errors that can really put someone down. It's the ability to overcome every issue, no matter how annoying, that makes someone successful at CAD. So as you tackle errors that may come your way on your CAD journey, remember that every error you overcome is a building block of your success, shaping you into a more skilled and resilient designer.And with that yap session out of the way, Here's the breakdown of the CAD subgroup:\r\nThis is the list of practical applications for CAD. Everything starts with learning the basics with Onshape and then moving onto any of the 3 (or all 3) side hobbies that CAD does. Listed is every goal that you need to be able to do to master that specific category.\r\nWe also have the design aspect of CAD. This is all the actual design skills that are necessary to be able to design things. In my opinion mastering the design aspect of CAD ensures that you don't end up wasting so much time iterating through designs. However, learning many of these design principles can't be taught. It comes with experience. Please keep in mind:CAD is merely a tool. The art of designing things goes far beyond mastering softwaresAs you go through these docs my hope is to at least try to pass on some of my experience so you don't repeat the same mistakes I have (Trust me, I didn't waste half the teams budget for nothing). With every lesson there should be a linked video (hopefully) that covers how I personally tackle that specific topic myself. So for those who don't like reading, you have yourself a second option! (I know im such a nice guy right?).\nAnyways, I wish you the best of luck on your CAD journey! - Sukhesh"}},"/CAD/Onshape/Assemblies/Assemblies":{"title":"Assemblies","data":{}},"/CAD/Onshape/Assemblies/FullPartGuide":{"title":"Fullpartguide","data":{}},"/CAD/Onshape/Assemblies/MatingGuide":{"title":"Matingguide","data":{}},"/CAD/Onshape/Assemblies/PartsInContext":{"title":"Partsincontext","data":{}},"/CAD/Onshape/Drawings":{"title":"Drawings","data":{}},"/CAD/Onshape/Essentials":{"title":"Essentials","data":{}},"/CAD/Onshape/Index":{"title":"Getting Started","data":{"":"Onshape is a fully cloud based platform, meaning to be able to CAD at any given time you will need to have access to wifi. A great perk of this is the ease of collaboration which is the reason we switched from Autodesk Inventor.\nTo get started head over to Onshape's website and create a student account.\r\nFill out your information in the forum\r\nComplete the preliminary questions\r\nFill out school information. School website link is https://rhs.rochester.k12.mi.us/\r\nAfter a bit of waiting, a confirmation will pop up telling you to check your email\r\nClick the button to activate your account in the confirmation email, and just accept all the default settings.\r\nMake sure to install MKCAD\nWelcome to Onshape! At this point ask the CAD lead to add you to the Feds201 classroom\nCongrats, you have now joined the designers who don't have to struggle with desktop CAD!"}},"/CAD/Onshape/Parts/3D+Modeling/3D+Modeling":{"title":"3d+modeling","data":{}},"/CAD/Onshape/Parts/3D+Modeling/BeltCalculator":{"title":"Beltcalculator","data":{}},"/CAD/Onshape/Parts/3D+Modeling/ModelingOptions":{"title":"Modelingoptions","data":{}},"/CAD/Onshape/Parts/3D+Modeling/SheetMetal":{"title":"Sheetmetal","data":{}},"/CAD/Onshape/Parts/3D+Modeling/Tips+Tricks":{"title":"Tips+tricks","data":{}},"/CAD/Onshape/Parts/Index":{"title":"Index","data":{}},"/CAD/Onshape/Parts/Sketches/Sketch":{"title":"Sketch","data":{}},"/CAD/Onshape/Parts/Sketches/SketchConstraints":{"title":"Sketchconstraints","data":{}},"/CAD/Onshape/Parts/Sketches/VariableSketch":{"title":"Variablesketch","data":{}},"/CAD/Physics/Collision":{"title":"Collision","data":{}},"/CAD/Physics/DynamicAnalysis":{"title":"Dynamicanalysis","data":{}},"/CAD/Physics/GearRatios":{"title":"Gearratios","data":{}},"/CAD/Physics/Useful+Resources":{"title":"Useful+resources","data":{"introduction#Introduction:":"","well-well-well#Well well well,":"The hardest part about CAD is not CAD - some idiot"}},"/CAD/Season+Recaps/2022recap":{"title":"Rapid React (2021 - 2022)","data":{"":"Leads: Ethan & Emron | Students: Sukhesh, Arya, & Immanuel | Mentors: Mentors: Mr.McEntireCAD was in a very primitive stage during this time. CAD has been pretty much useless to the team for many years. That sounds harsh, but that was the actual reality of this subgroup. There needed to be more input CAD provided to the building aspect of the robot, as all the robots built for the 24 years the FEDS have existed have all been built without any CAD planning.","ebenezer-cad-2021---2022#Ebenezer CAD (2021 - 2022)":"","season-summary#Season Summary:":"This is all from my perspective (Sukhesh Here) since the remaining members have all left. (God I feel old now...)There isn't really much to say. I joined the team originally to do programming but there were too many people on the team and If I had any shot of doing something it would be through CAD since there were only 2 people on the team at the time. The team culture at this time was more of Seniors do everything and freshman sit back and mess around. I didn't really like that since I genuinely wanted to do something, so I tried my hardest to learn CAD but honestly there's only so much you can learn without genuine design experience. I knew next season I would automatically be a lead, so I did plan some drastic changes to the subgroup.I absolutely despised the idea of only seniors doing all the work. I wanted to ensure the new students could actually do something.This was my general CAD to-do list for next year:\nSplit students into different groups for different tasks\nLearn the Xcarve so we can actually manufacture our own parts\nFigure out a way to collaborate with Autodesk Inventor\nHave students involved during build season\nFinish CAD before Mechanical, a first in the team's history."}},"/CAD/Physics/Motor":{"title":"Motor","data":{}},"/CAD/Season+Recaps/2024recap":{"title":"Crescendo (2023 - 2024)","data":{"":"Leads: Sukhesh, Arya & Michael | Students: Charlie, Alex, Otto, Jason | Mentors: Mentors: Mr.McEntire, Mr.Lawrence, Mr.DavisThe gods must've understood my anger after the joke of a design last season. It was truly a failure. CAD was blessed with 2 new mentors, Mr.Lawrence & Mr.Davis, who joined the cause of making CAD better. Thanks to Boss's investment in developing my understanding of design from last year, I had a clear vision of what we needed to do this season.This was the rough outline I had for this season:\nEverything, down to the very last screw & nut, MUST ABSOLUTELY, WITHOUT EXCEPTION, be cad-ded in.\nKeep the model simple, the mechanical subgroup is fairly inexperienced\nTasks for the model will be split by sub-assembly, rather than by skill\nActive input from mentors during CAD process\nRegular design reviews with mechanical subgroup\nRobot must look cool!","off-season#Off-season":"Following strictly to the outline, we had to create some drastic changes to CAD. To actively receive input from mentors while we were doing the CAD (Instead of waiting till the next meeting to discuss), and to actively work on the model with other students, we needed to leave Autodesk Inventor. During our trip to states last season, Zayn and I researched what other teams used as their primary CAD softwares, and a good majority of teams either used Onshape, or Solidworks. After going back and forth with the comparison (Our needs and what we valued most), Onshape was selected as the primary CAD software for the team.Onshape is a cloud based platform that suited all our needs for collaboration. Of course, there was a learning curve that Myself, Arya, & Michael needed to push through.(Screenshot above of me replicating team 1678's hooded shooter)We all learned Onshape our own different ways. I personally found it useful to try copying other teams (Like above) models and try to make them myself. In that way, I learned by doing.The new students happened to all be in one friend group so they all seemed to have a singular interest in 3D printing. Again, it seems luck stuck again, as we needed people who new how to 3D print. Michael helped teach the new students to do 3D printing, and lucky for us, the process was fairly simple as they already came in with prior knowledge.The robot in 3 months challenge helped us out greatly as we got to test out the capabilities of Onshape before the season startedWhile we understood that this was the first model, we were kind of... disappointed. We learned onshape but we kind of struggled with communication (having mistakes working in wrong branches, not being able to complete subsystems because of waiting for someone else to finish theirs, etc.), and we realized that more than anything that was the most important thing coming into the upcoming build season.We needed to ensure that the design of the robot was communicated to the necessary people","build-season#Build-season":"I'm happy to say that the work we did to improve CAD worked. I present to you, for the first time in the teams history where CAD finished before Mechanical (and also a first for having a fully completed CAD model), Agent Spyder.","agent-spyder-2023---2024#Agent Spyder (2023 - 2024)":"Sure enough, we cad-ded everything. Down to the very last screw. To say this model was an upgrade from last year's disaster would be a major understatement. It was like a completely different team made designed this robot. Can we just take a second to appreciate this model? A fully flushed out upside down electrical board, with the coolest looking structural cutouts ive ever seen (also a first in the team's history), with the lightest robot in this team's history, and a sick color scheme to match the vibe— it truly is a masterpiece in my eyes.Ok enough of the glazing, lets get down to the process of how we got here.Before kickoff started we went over a rigid structure of the build schedule, having CAD spend 2 weeks to design the robot. While we were extremely motivated to accomplish such a feat, realistically we had no chance in hell of completing the entire CAD model in 2 weeks.","brainstorming#Brainstorming":"As usual, we spent the time after kickoff learning the rules, setting the design parameters for the robot. This time however, we did something new: we set design constraints upon ourselves. While they weren't necessary to have a competing robot, we set these in place based on our team goal of having a world's competing robot. The design constraints were as followed:\nRobot must be able to climb, shoot, place in trap, and amp\nEverything must be packaged within a 26*26in frame\nRobot must be no taller than 30in (To drive under stage)\nRobot must be light (Overall weight < 125lb)\nRobot must have Low CG to ensure smooth climbing\nRobot must be able to shoot from stage (To ensure fast cycles)\nRobot must be able to make 10 cycles\nRobot must be fast (~8 seconds in travel time across the field)\nRobot must be modular (Quick to fix subsystems between matches)\nElectrical board must have easy access\nThe constraints were based off of the strategy that scouting came up with. Most of these constraints were ok, but the most painful was the 26*26in restriction, forcing us to really figure out some crazy geometry to meet the constraint.As usual, every design starts from the 2D world. We used variable sketches to help assist us in replicating the actions that the robot would possibly do to ensure the geometry for the robot would meet the constraints.Exact 2D planning sketch utilized to figure out the general geometry we desired. Most of the sketches were variable as in we could change the orientation of the makeshift intake and shooter to get the desired movements for the subassembly. This sketch represents the robot on the ground picking up a note from its left side with the amp on its right side. Construction lines are extremely useful for making design plans like this.After getting an overall general sketch with an agreed upon design (We had an online Zoom meeting and 2 in person meetings w/ the mentors to design this), we started to convert the sketch to 3D to do a general review with the team. Above is the position of the robot to shoot into the trap. (It was planned for the note to go through an open slot in the intake acting as both an intake and a secondary shooter)Of course, there were other variants of the original design idea, and this one was a design idea that was copied from team 33, the Killer Bees. We decided to do the top design from a very basic trade study where we rated each design from 1 to 5 on a few categories (Reliability, Speed, Modularity, Simplicity, and Time) and the design that had the highest total would be the one we would go with. I'll talk more about why this trade study was extremely flawed towards the end. But the winner was the top design which ended up on the actual robot.After settling on a final design direction we started finalizing the overall technical requirements for each subassembly.\r\nFor example, above is the sketch we used to determine the shooting positions/shooter angles that we would require to meet our requirements (Constraints 5, 6, 7 were the main ones for this)Another example of variable sketching used to determine the shooter angles at certain locations. The highlighted red and orange lines represent the overall degree of freedom that we determined the shooter required for meeting the constraints of the robot.With the brainstorming session done, we were already a week behind schedule.... However, we basically had a clear idea of what we needed to CAD up thanks to the meticulous time spent planning everything (including the general shapes of the subassemblies!)","design#Design":"As we got started with the design, we went through many, many, manyyyyy iterations.\nSometimes, you just feel like you wanna die - Sukhesh\nAs mentioned above, the work for the robot was split by subgroups. I would make the Intake, Arms, and overall structure, Arya would make the shooter, and Michael would make the electrical board. The new students would cover all the 3D printed parts that we requested to be printed.","intake#Intake":"The intake was probably the 2nd most iterated thing on the robot, 2nd only to the electrical board.\r\nImmediately after the presenting the sketch to the team, I extruded the sketch and adjusted the shape slightly to make it more appealing. (I know my priorities are mixed up.)\r\nThe biggest dilemma that we had with the intake was the placement of the motor. I originally had a Kraken motor on the intake for driving the wheels and would have a twist motor connected to the arm.\r\nWe eventually moved both the drive and pivot motors to the arm because of the very simple principle that the motors out there were exposed, and would be moving a lot. By Murphy's law since there's more things that can happen to the intake (collisions, wiring issues from constant movement, etc.), we decided to move the motors to the less moving and less exposed part which were the arms.\r\nEventually Mr.Lawrence showed us Neo 550 motors which were tiny and could fit on the intake without significant weight issues and limited the worry of collisions since it was pretty small and well protected with the intake walls in place. However, when we tested this version (which was considered a final version), the Neo 550 could not lift the intake simply because of the sheer amount of torque that it needed to exceed to lift the intake. The intake was clearly too heavy.\r\nThis is basically the final version of the intake that you have all come to know. Notice the replacement from wheels and axle to polycarbonate tubing, the cutouts on the intake frame, and the change in gear ratio for the pivot motor. The original intake weighed 5.2kg and with this version we brought it down to 2.8kg. The calculations we did for the torque and gear ratios have been lost, but I assure you that everything was planned with math. I would love to say that the intake was optimized for those cutouts through Altair, but I really didn't have the time to do the optimization, so I kinda just... drew random lines like a schizophrenic and got that cool pattern. (You'll see this similar process for the other cutouts on the robot as well.)\r\nHowever, I did do some final stress and displacement analysis for the intake to ensure that it would last through our competitions. This picture shows the analysis of a \"moment\" while lifting the intake since it's only driven from one side. Stress analysis basically confirmed to us that this intake was done.","arm#Arm":"The arm was definitely the most simple part on the robot. From the day I sketched out the arm just on a whim to the day we finished the length of the arm never changed.\r\n\r\nHere was just me trying to do some weight savings for the arm because it was extremely heavy. This was also the first version of the arm.\r\nAfter getting the arm design nailed down, which included changing the diameter of the intake connection hole to the same as the structure connection one (since we were using versa hubs for both side), I researched how to effectively reduce weight on the arms. I basically copied team 3357's arm cutouts lmao.\r\nAnd that resulted in this arm version which is basically the final version. We added cuts to the hub connections so we could make the arms and intakes modular if needed. (Hubs would be removed and the subassembly would just be pulled right out).\r\nTo confirm that the cutouts would indeed work for our design, I ran a little stress testing on the model and learned that the cutouts were perfectly fine on the arm and in fact could be reduced even more if needed. But with that the arm design was confirmed. (The light white at the bottom of the arm shows the stress applied from a force perpendicular at the top (blue arrow))","shooter#Shooter":"The shooter (for the most part) was pretty straightforward\r\nAs usual Arya started with the making a general model of the shooter that could fit the note in it and had the wheels placed where prototyping had shown the optimized placement.\r\nThe pivot point for the shooter had to move to the bottom front of the shooter to fit within the frame and the back was cut accordingly to not interfere with the intake coming in\r\nAfter adjusting the intake geometry to not interfere with the shooter the back was again extended out and the sprockets to rotate the shooter were put in place.\r\nFinally, I came in as the pocket dude and pocketed as much as I could to reduce the weight of the shooter to make it easier for the motor to pivot the intake. Also added the cuts to the hub area to have the shooter be modular if needed to be replaced (spoiler: it never had to be removed ever.)","electrical-board#Electrical Board":"Im gonna let Michael talk about this one lmao he has A LOT to say about this\nMixing my monster with battery acid sounds just about really good right now - Michael\nAlso for anyone curious it takes over 150 hours of active cad-ing to complete a robot. So overall 200-250 hours of design to complete a robot.Time logs:\nMain robot CAD\nElectrical Board CAD\nShooter CAD\nThere were plenty of other files but we just couldn't include all of them since it would simply be too many.","takeaways#Takeaways":"If it wasn't already obvious this season was an overall success for cad. We got to achieve all the goals we set out to do, and we made a design that followed the constraints that we had. Of course, there's always ways to improve and this season had no shortage of lessons to learn from.\nThe entire team needs to be involved with the CAD\nThis one is extremely important because it would've made our lives easier when designing the robot if only there were students from each subgroup actively commenting/viewing the CAD model while we work on it (90% of CAD is done at home). This is especially important because instead of waiting till the next meeting to learn whether the design suited each teams needs, they could all just tell us in advance while we were at home so we don't end up wasting time re-doing designs. Having the input from all the subgroups in advance helps to save us time.\nFor the love of all things holy, we need to do space claims\nThis involves having each subgroup quite literally point at areas on the empty robot frame telling us what space they need for their things. It's also creating a rudimentary version in the form of boxes of the subassemblies and designing the path of the game piece in advance to keep the overall design of the robot running smooth. By having this baseline to design off of, we eliminate any interference from other subassemblies/subgroups needs that result in major time loss re-designing for that mistake.\nCan we actually do a data-driven design?\nWe had numerous designs as shown above in the brainstorming phase, however the way we decided on the direction were going to take was an absolute joke. We literally had a meeting like in the Lord of the Rings Council of Elrond scene in the CAD room.The mentors and I gathered together in front of the whiteboard in the back, and we basically drew a 5 column table with 3 rows for each design option. We then rated it from 1 to 5 based on 5 categories that were mentioned in the brainstorming tab. The way we went about rating each design was almost purely based on speculation. How could you know what design was faster than another if you've never seen it before? There were many questions like this in my head, and honestly the way we went about choosing a design was pretty flawed. We definitely need a better method of figuring out which design is the best for our needs.\nWe need prototyping to be useful\nWhile it was useful for the shooter since we knew the compression and wheel spacing needed since we tested it like crazy, for everything else, it was designed from our brains. We were on our own. The compression for the note in the intake was completely guessed by me and we just rolled with it. We also couldn't test the practice robot since the arms weighed too much. We had to do the cutouts on the arm to actually use the practice robot and test the mechanisms, and unfortunately we just didn't have the time. I really wished that we had one of those holed out walls to test out contraptions like this to make prototyping easier.\nThe manpower of CAD has dwindled\nUnfortunately now that Michael and Arya are gone I'm left all alone for next season. This season has shown me just how important it is to have other students who know what they're doing and who I can rely on to do whatever I need them to do. It's something I need to work on for the future new students of the team, especially since I'm going to be a senior.\nIf there's one main positive thing to take from this season, it's the living proof that we can indeed design a world's winning robot. With better collaboration, it really is possible."}},"/CAD/Season+Recaps/2023recap":{"title":"Charged Up (2022 - 2023)","data":{"":"Leads: Sukhesh & Arya | Students: Michael, Julia, Naren, and some other ppl I forgot | Mentors: Mr.McEntireArya and I(Sukhesh) observed a lot of the improvements needed to CAD and set out to make a plan that could change the role of CAD on the team. Below is the list of improvements/goals we had for the season.\nMORE DETAILED CAD!!!!!\nStick to the build schedule.\nWork in sync with mechanical\nGet better at CAD\nGet the robot painted\nMake robot look cool\nFinish all of CAD in 1 week\nTrain all the new students to do CAD\nUtilize other functions of CAD\nNot screwing up on the design of the robot\nYeah, we were pretty ambitious. It’s a crazy feeling when you become the first group of students to be given the challenge to completely change the course of this subgroup. CAD has always been downplayed in the build aspect of the robot since the start, so we were ready to take up the challenge of actually utilizing CAD for all aspects of the build process.","off-season#Off-Season":"The most shocking thing about this season was the sheer amount of students interested in CAD. It was probably the biggest shock of the season, mainly cause like who actually wants to do CAD? CAD ended up being the largest subgroup and we had to figure out how to engage all the students. Like last year, we were using Autodesk Inventor as the main CAD software. Last year we went through a library of practice parts given by some random dudes on the internet as practice. From experience I can say that the drawings were helpful up to a point, because many of the more advanced drawings were pointless as the features required to make them would never be used on our own parts. We had students go through the practice parts and ran sessions to guide students through the assembly process of the robot.Our biggest problem was that many students did not have windows computers at home to run Autodesk Inventor. The training for the students had to happen during robotics, and this was especially difficult as the team only had meetings every Thursday. On average the students received a total of 10-15 hours of CAD training for the off season. By the time build season came, it was not surprising that only 3 students on the team could “actively” work on the robot.A side thing I did was manually download every single part from the vex website and compile a local library(Look in vex folder) to easily access the parts without trying to search them up. Yeah. I know. I have no life.","build-season#Build-Season":"Similar to previous years, our prototyping started out with a simple brainstorm of all the possibilities to score points in the new game. Scouting provided input on ways we could maximize our scoring, and we developed prototypes that followed our scoring plan. CAD immediately got started on working on designs for each prototype. Our inexperience really showed here. Our CAD process was slow due to many factors mentioned later on. Our CAD model really only got done for the actual competition robot. What’s scary about this is that it means we don’t actually know if our designs were going to work","dora-cad-2022---2023#Dora CAD (2022 - 2023)":"This robot sucked. No like seriously, it sucked so much that the students vowed to never talk about this robot again. It was a pure disgrace and utter disappointment to the entire FEDS 201 franchise. To be honest though, I tried my best. Boss (may god bless his soul) was investing in the future of the CAD team by giving us this valuable learning experience. He threw this season to let us new students learn to invest in a better season next year. This robot was just a massive defense bot since the arms could not operate since intake weighed too much. This robot was a utter failure, but the beauty in that is the fact that I could never repeat the same mistake again. I knew what I was looking for. I knew what I had to do to make a FRC robot.Unfortunately I also learned about the main side effect to CAD - CAD Burnout.I was done. I just couldn't CAD another robot. So this is where I pass it on to Arya for the 2nd robot we made in the same season. (First time in FEDS History. That's how bad this season was.)","dawn-cad-2022---2023#Dawn CAD (2022 - 2023)":"Arya here. Both Sukhesh & I hated the robot so much that I errrm deleted the cad for this robot after the season ended so this is the only surviving picture of the model....Sukhesh basically left everything to me and I also got CAD Burnout very quickly. This at least the mentors directed me to do everything so it was a lot easier to figure out then when we had to creatively think of everything. The hardest part of this robot was designing the uprights for the arm. The sheer amount of issues with the gear ratios and chain tensioning was extremely annoying. We eventually figured it out though.","takeaways#Takeaways":"Arya and I were not ready at all for the robot. CAD is by far the hardest subgroup on the robotics team. I think many people don’t understand the difficulty with planning every single thing that has to happen on the robot for it to work. We suffered a lot while planning the robot. We didn’t know what parts to use to create what we thought of. We didn’t know how to attach the parts and if there would be any interference with it. There were just so many unknowns when we were cadding the robot up that we just assumed would work until we actually see the problem when mechanical is trying to figure out what to do from looking at the model. I like to call this skill - “Design sense”: The ability to understand how a part works and manipulate the part to attach to anything . We were heavily lacking in that category, and I think in large part it had to do with the fact that me and Arya were both first year leads in CAD.Experience is the only thing that can actually improve our design senses."}},"/Contribution/CovertingToMDX":{"title":"Converting to MDX","data":{"":"Contribution - FEDS201\nSince we know that learning MDX can be a bit overwhelming, we have created a guide to help you convert your work to MDX. This guide will walk you through the process of converting your work to MDX and publishing it to the FEDS201 ToolKit website.\nSince Google Docs is one of the most popular word processing tools, we will start by showing you how to convert your Google Docs Document to MDX.Its important to note that Google Docs does not support MDX, so you will need to convert your Google Docs Document to Markdown first, and then convert the Markdown file to MDX.","create-a-google-docs-document#Create a Google Docs Document":"Go to your Browser and type docs.new in the URL bar. This will create a new Google Docs Document.","write-your-content#Write your content":"Write your content in the Google Docs Document, Use the Style window to format your content, and add images, links, and other media.\r\nAny other format other that the default will not be converted to MDX.","export-your-google-docs-document-to-markdown#Export your Google Docs Document to Markdown":"Go to File > Download > Markdown (.md). This will download your Google Docs Document as a Markdown file.","convert-your-markdown-file-to-mdx#Convert your Markdown file to MDX":"As we know, MDX (.mdx) is a superset of Markdown (.md), so you can copy the content of your Markdown file and paste it into a new MDX file. You can also use an online converter to convert your Markdown file to MDX.","publish-your-mdx-file#Publish your MDX file":"Once you have converted your Markdown file to MDX, you can publish it to the FEDS201 ToolKit website. You can use the GitHub repository to create a pull request and add your MDX file to the repository.\nAnother popular tool for writing and organizing content is Notion. In this section, we will show you how to convert your Notion Document to MDX.Notion does not support MDX, so you will need to convert your Notion Document to Markdown first, and then convert the Markdown file to MDX.But its great that Notion has a built-in feature that allows you to export your content as Markdown.","download-a-notion-document#Download a Notion Document":"Go to your Notion workspace and select the Document you want to convert to MDX. Click on the ... icon in the top right corner of the page and select Export.","export-your-notion-document-to-markdown#Export your Notion Document to Markdown":"Select Markdown & CSV from the Export options. This will download a Zip .Extract the Zip file and you will find a Markdown file with the content of your Notion Document.","convert-your-markdown-file-to-mdx-1#Convert your Markdown file to MDX":"As we know, MDX (.mdx) is a superset of Markdown (.md), so you can copy the content of your Markdown file and paste it into a new MDX file. You can also use an online converter to convert your Markdown file to MDX."}},"/Contribution/OpeningVsc":{"title":"Setting up Vs Code","data":{"":"Contribution - FEDS201","#":"Now, that you have installed VS Code, you will need to configure it to work with Git. This will allow you to make changes to the FEDS-Handbook and submit pull requests.","installing-extentions#Installing Extentions":"Click on the Extensions icon in the Activity Bar on the side of the window. This will open the Extensions view, where you can search for and install extensions.","recommended-extensions#Recommended Extensions":"MDX: This extension provides syntax highlighting and other editing features for MDX files.\nPrettier: This extension automatically formats your code to make it more readable.\nMDX Preview: This extension allows you to preview your MDX files in the editor.\nNPM : This extension allows you to run npm scripts from the editor (Kasper Mikiewcz).\nNPM Intellisense : This extension autocompletes npm modules in import statements (Christian Kohler).\nThese extensions will help you work with the FEDS-Handbook more efficiently.","go-back-to-the-explorer-view#Go Back to the Explorer View":"Make yourself familiar with the Explorer view. This is where you will find all the files and folders in your project."}},"/Contribution/general":{"title":"Contribution","data":{"":"Contribution - FEDS201\nThank you for your interest in contributing to our documentation! We appreciate your help in making it better.","how-to-contribute#How to Contribute":"To contribute to our documentation, follow these steps:\nClone the repository.\nMake your changes.\nSubmit a pull request.\nAn admin will review your changes and merge them if they are appropriate.","what-to-contribute#What to Contribute":"You can contribute to our documentation in the following ways:\nFixing Errors: If you find any errors in our documentation, you can fix them.\nAdding Content: If you think our documentation is missing something, you can add it.\nImproving Content: If you think our documentation can be improved, you can make the necessary changes.\nIf you have any questions about contributing to our documentation, you can contact us at"}},"/Contribution/howtopublish":{"title":"How to Publish","data":{"":"Contribution - FEDS201\nCongratulations and thank you for contributing to FEDS201! This guide will walk you through the process of publishing your work to the FEDS201 ToolKit website.","prepare-your-work#Prepare Your Work":"Before you publish your work, you need to prepare it for publication. This includes:\nReviewing your work for any errors or issues.\nEnsuring that your work is well-documented and easy to understand.\nProperly formatting and styling your work.\nMaking sure your work is accessible and user-friendly.\nEnsuring that your work is properly licensed and attributed.","submit-your-work#Submit Your Work":"Once you have prepared your work for publication, you can submit it to the FEDS201 ToolKit website. To do this, you will need to create a pull request on the FEDS201 ToolKit GitHub repository. In your pull request, be sure to include a detailed description of your work, including any relevant information about the changes you have made and the reasons for those changes.\nIf you are unsure about how to create a pull request, you can refer to the GitHub documentation.","direct-push-to-repository#Direct Push to Repository":"If you have the necessary permissions, you can directly push your changes to the repository. Ensure that your changes are thoroughly tested and reviewed before pushing. Follow these steps:\nSwitch to the Correct Branch\nIn the bottom left corner of the window, you will see the current branch name. Click on it and select the branch you want to push your changes to.\nIf you don't have a branch, you can create a new branch by clicking on the + icon.\nOpen Source Control View\nClick on the Source Control icon in the Activity Bar on the side of the window. This will open the Source Control view.\nCommit Your Changes\nWrite a commit message in the message box.\nGo to the drop-down menu and select Commit and Push.\nIf you are a member of the FEDS201 team, you can directly push your changes to the repository. Ensure that your changes are thoroughly tested and reviewed before pushing."}},"/Contribution/runninglocallly":{"title":"Running Locally","data":{"":"Contribution - FEDS201\nTo run the FEDS-Handbook locally, you will need to follow these steps:","clone-the-repository#Clone the Repository":"Click on the \"Code\" button on FEDS-Handbook's GitHub repository and copy the URL.\nClick on the \"Clone Git Repository\" button in VS Code and paste the URL in the Command Pannel. This will clone the repository to your local machine.Save the repository in a location where you can easily access it.","open-the-repository-in-vs-code#Open the Repository in VS Code":"Now that you have cloned the repository, open it in VS Code by clicking on the \"Open Folder\" button in the Welcome view.","open-the-terminal#Open the Terminal":"Click on the Terminal tab in the Activity Bar on the side of the window. This will open the Terminal view, where you can run commands.","install-packages#Install Packages":"Run the following command in the terminal to install the necessary packages for the FEDS-Handbook:\nnpm install\nThis command will install all the packages listed in the package.json file.\nYou may see some warnings during the installation process. These warnings are usually safe to ignore.\nIf you encounter \"npm ERR! code ERESOLVE\" errors, you can try running the following command to fix them:\n    PS C:\\Users\\pyintel-admin\\code\\whiteboard\\frontend> npm run start\r\n\r\n        > whiteboard@0.0.0 start\r\n        > ng serve\r\n\r\n        This program is blocked by group policy. For more information, contact your system administrator.\nPlease refer to the InstallingApplication , run the command and then try running npm install again.","voila#Voila!":"You have successfully installed the necessary packages for the FEDS-Handbook. You are now ready to start contributing to the documentation!","start-the-development-server#Start the Development Server":"Run the following command in the terminal to start the development server for the FEDS-Handbook:\nnpm run dev\nThis command will start the development server and open the FEDS-Handbook in your default web browser.","explore-the-application#Explore the Application":"Explore the FEDS-Handbook to see the changes you have made. You can navigate through the pages and view the content you have added or modified.","voila-1#Voila!":"You have successfully run the FEDS-Handbook locally. You can now make changes to the documentation and see the results in real-time!"}},"/Contribution/settingUpGit":{"title":"Setting up Git","data":{"":"Contribution - FEDS201\nOnce you have installed Git, you will need to configure it with your name and email address. This information will be used to identify you when you make changes to the FEDS-Handbook.","configure-git#Configure Git":"Open the Windows Powershell as an administrator. You can do this by searching for \"Powershell\" in the Windows search bar, right-clicking on the Windows Powershell app, and selecting \"Run as administrator\".\nRun the following commands:\ngit config --global user.name \"Your Name\"\r\ngit config --global user.email \"Your Email\"\nReplace \"Your Name\" with your actual name and \"Your Email\" with your actual email address.\nYou will need to use the email address associated with your GitHub account.","verify-configuration#Verify Configuration":"To verify that Git has been configured correctly, run the following command:\ngit config --global --list\nYou should see your name and email address listed in the output.","voila#Voila!":"You have successfully configured Git with your name and email address. You are now ready to start contributing to the FEDS-Handbook!"}},"/Electrical/Tools&Setup":{"title":"Template","data":{"":"Be Consistent: Use the same style and formatting throughout the guide.\nBe Concise: Keep your writing clear and to the point.\nBe Informative: Provide useful information that helps the reader.\nTitle: The title should be descriptive and concise.\nImport Statements: Import any components or icons you need for the page.\nIntroduction: Provide an overview of the topic and what the reader can expect to learn.\nContent: Organize the content into sections with headings and subheadings.\nLinks: Include links to relevant resources or external websites.\nNo-spaces in file names.\nAdd your file name to the _meta.json file.\nexport default {\r\n  foo: '',\r\n  1992_10_21: '',\r\n  1: ''\r\n}\nUse the same style and formatting throughout the guide."}},"/Experiences/2025":{"title":"2025","data":{"week-1#Week 1":"","day-1#Day 1":"Type: Lecture\nTime: 1h\nTopic: Introduction to the course\nResources: [Slides](https://slides\nHomework: Read Chapter 1","day-2#Day 2":"Type: Lab\nTime: 2h\nTopic: Setting up your development environment\nResources: Instructions\nHomework: Install the required software","week-2#Week 2":"","day-1-1#Day 1":"Type: Lecture\nTime: 1h\nTopic: Variables and data types\nResources: Slides\nHomework: Do the exercises","day-2-1#Day 2":"Type: Lab\nTime: 2h\nTopic: Control structures\nResources: Instructions\nHomework: Write a program to solve a simple problem","week-3#Week 3":"","day-1-2#Day 1":"Type: Lecture\nTime: 1h\nTopic: Functions\nResources: Slides\nHomework: Write a program to calculate the factorial of a number"}},"/Experiences/RSS":{"title":"Robot Safety System","data":{"":"Over the course of the 2024 season, we developed a robot safety system to ensure the safe operation of our robot during competitions and testing. This system was designed to prevent accidents and injuries by implementing safety features and protocols that would protect team members and spectators and comply with competition rules and regulations.","highlights#Highlights":"","subsystemabs#SubsystemABS":"Abstract Class: SubsystemABS is an abstract class that extends SubsystemBase, providing a structure for subsystems in a robot project.\nNetwork Tables: It sets up network tables for communication between the robot and the dashboard.\nShuffleboard Integration: It integrates with Shuffleboard to create tabs for displaying subsystem data.\nInitialization: It includes an init method for initializing the subsystem.\nAbstract Methods: It defines several abstract methods (init, periodic, simulationPeriodic, setDefaultCommand, isHealthy, Failsafe) that must be implemented by subclasses.\nError Handling: It handles errors when creating Shuffleboard tabs by appending \" - New\" to the tab name if an IllegalArgumentException is thrown.\nInstance Management: It maintains an instance of the subsystem for easy access.","visionabc#VisionABC":"Vision-Specific Functionalities: Extends SubsystemABS and defines additional vision-specific functionalities like target checking, LED control, and pipeline switching.\nSimulation Handling: Ensure that simulationPeriodic handles simulation-specific vision updates to align with competition simulations.","fieldmap#FieldMap":"Visualization Utility: A well-implemented utility for visualizing the robot's pose and field elements on Shuffleboard.\nError Handling: Include bounds checking or error handling when updating game element positions.","autontester#AutonTester":"Dynamic Mapping: Provides a dynamic way to map autonomous commands to Shuffleboard.\nInput Validation: Add input validation to ensure the Group array has an even number of elements (pairs of labels and commands).","safetymanager#SafetyManager":"Health Management: Manages health status of subsystems and handles failsafe actions if a subsystem reports unhealthy.\nDiagnostic Logging: Consider logging additional diagnostic details when a subsystem fails for easier debugging.","smooth#Smooth":"Data Smoothing: Implements a simple moving average for smoothing data.\nGeneric Implementation: Consider making Smooth generic so it can handle more data types or customize the windowing behavior.","visionobject#VisionObject":"Vision Data Representation: Represents vision data for detected objects and integrates with NetworkTables.\nEdge Case Handling: Ensure the calculations for normalized angles (getAngle) handle edge cases (e.g., camera width/height being zero).","general-suggestions#General Suggestions":"Code Organization: Consider separating the logic into more focused packages (e.g., vision, auton, safety, utils) to improve clarity.\nError Handling: Improve exception handling across classes, especially in methods that interact with hardware or external libraries like NetworkTables.\nTesting and Simulation: Include unit tests or simulation-specific overrides for methods like periodic and Failsafe.\nDocumentation: Add JavaDocs to all public methods and constructors to improve maintainability and onboarding for new developers.\nEfficiency: Evaluate the performance of components like Smooth for real-time usage, ensuring they meet the timing constraints of the robot's control loop.\nBy following these guidelines, we can ensure a safe and productive environment for everyone involved in our robotics projects."}},"/Experiences/Robot_Design/robotDesign":{"title":"Welcome to the Robot Design","data":{"":"Welcome to the Robot Design Section of FEDS201! This section is dedicated to providing resources, sharing experiences, and documenting the challenges and solutions encountered by our robot design team over the years.","what-you-will-find-here#What You Will Find Here":"","resources#Resources":"We have compiled a list of valuable resources to help you with your robot design projects. These include:\nDesign Guidelines: Best practices for designing robot components.\nMaterial Selection: Information on different materials and their properties.\nTools and Equipment: A guide to the tools and equipment commonly used in our projects.","problems-faced#Problems Faced":"Over the years, our team has encountered various challenges. Here, we document these problems along with the solutions we found:\nAlignment Issues: Techniques for ensuring precise alignment of robot components.\nMaterial Fatigue: How to identify and mitigate material fatigue in your robot designs.\nTool Wear: Tips for maintaining and extending the life","notes-and-learnings#Notes and Learnings":"Our team has taken extensive notes during our projects. These notes include:\nProject Logs: Detailed logs of past projects, including successes and failures.\nMeeting Minutes: Summaries of our team meetings, highlighting key decisions and action items.\nTechnical Insights: In-depth technical insights and tips from experienced team members.","getting-started#Getting Started":"To get started, we recommend reviewing the following sections:\nDesign Guidelines\nMaterial Selection\nTools and Equipment\nIf you have any questions or need further assistance, feel free to reach out to any of the robot design team members. We are here to help you succeed!","contributing#Contributing":"We encourage all team members to contribute to this section. If you have any valuable insights, resources, or experiences to share, please do so. Together, we can build a comprehensive knowledge base that will benefit current and future members of the Robot Design Subgroup.Thank you for being a part of FEDS201 and contributing to our robot design projects. Let's build something great together!\nIf you have any suggestions for improving this section, please let us know. Your feedback is invaluable!"}},"/FEDSHandbook":{"title":"Rochester High School Robotics (FRC 201)","data":{"":"REVISED 8/10/23","team-handbook#Team Handbook":"REVISED 8/10/23","introduction#Introduction":"Welcome to Team 201: The FEDS! We hope you will find your experience very rewarding and enjoyable. This guide is intended to give you and your parent/guardian an understanding of the program and the required responsibilities. In the following pages you will find information relating to team rules, expectations, and many other aspects of our team and FIRST.As a FIRST Robotics member, you have an incredible opportunity to gain knowledge and share your enthusiasm while growing into future Business, Technology, and Engineering Leaders. You will participate in a life changing experience, and have the opportunity to learn many skills that will help you in your future, from networking with other teams and gaining sponsorships to designing and building a robot to our own specifications to working as a fully functional team with a varied group of people.The success of Team 201 in robotics and its numerous other activities is due to the dedication of our members (this includes our Students, Mentors, and Parents) acting as a TEAM. Your participation is essential to fulfilling our program’s goals. Every member’s commitment and responsibility keeps our team running smoothly. The possibilities are only limited by your engagement and enthusiasm. We encourage you to have an abundance of both!","purpose-statement#Purpose Statement":"The mission of the FEDS (201) is to inspire students to be STEM leaders through mentoring and innovation. The FIRST robotics program provides hands-on Science, Technology, Engineering, and Mathematics (STEM) experience for our students centered on the FIRST Robotics Competition. The team will use this experience to provide students practical, technical, business and community relations experiences and to promote STEM within the school district as well as the community of Rochester/Rochester Hills.For additional information please refer to the following websites:\nTeam 201 website\nFIRST Robotics website\nFIRST Michigan district information\nFIRST teams’ discussion forums","joining-the-team#Joining the Team":"All Rochester High School students are eligible to apply to Team 201. Members must submit an application. New students will participate in an interview in the Fall. Returning students will be interviewed at the end of the prior season in the Spring. Decisions about student groups/roles will be based on the prior year’s level of commitment, including special project hours, event attendance and dedication to the team. The new members will also need to submit an application and participate in an interview.Due to the high costs of materials, registration, and other fees associated with robotics, each team member will contribute a participation fee of $250 to be paid at the mandatory Parent/Student Orientation, offered twice in September. The fee is payable by check made to Stem United or Venmo (@stemunited201). There is an additional club fee of $30 that should be paid directly to the school at the RCS enrichment website under RHS – Clubs. Students with financial hardship will not be prevented from participating and should contact Team 201’s teacher sponsor to express any concerns. In addition, students are each required to raise an additional $500 by December through fundraisers and/or sponsorship solicitation.","first-consent-and-release-forms-stims#FIRST Consent and Release forms (STIMS)":"FIRST requires all youth team members to register as a member of a specific FIRST team via www.firstinspires.org. The student will create a user account and provide the parent/guardian email address. Our team number is 201 and the program is FRC. The parent should receive an email to complete the registration and electronically sign the FIRST Consent and Release Form.The full application form, with all orientation steps, can be found at feds201.com in the Application tab.","what-is-first#What is FIRST?":"FIRST (For Inspiration and Recognition of Science and Technology) was founded by inventor Dean Kamen to inspire young people’s interest and participation in science and technology. FIRST is volunteer-driven and built on partnerships with individuals, businesses, educational institutions, and government. Some of the world’s most respected companies provide funding, mentorship time, talent, and equipment to make FIRST’s mission a reality. Visit the website at www.firstinspires.org. There are various levels within FIRST including Lego League Explorer (K-3 grades); Lego League Challenge (4-5th grades); FIRST Tech Challenge (FTC, 6-8th grade). These programs are high-tech spectator sports.","frc-first-robotics-competition#FRC (FIRST Robotics Competition)":"The FRC competOur team operates year-round. During the summer and fall, we conduct training, outreach activities, team building activities and fundraisers. ition season typically starts at the end of February and lasts for eight weeks. Team 201 will participate in a minimum of two Michigan District competitions during the regular season. Each year FRC unveils a new challenge at kickoff in January. High school students work with professional mentors to solve the engineering design problem and then join other teams in alliances to play the game at competition events where they are judged on design, innovation, and performance. Students learn teamwork, acquire technical skills, develop business acumen, and discover strengths they never knew they had. The program is a life-changing, career-molding experience and it’s a lot of fun. Be competitive and play hard on the field, but it is much, much more than a game.","gracious-professionalism-gp#Gracious Professionalism (GP)":"The FIRST organization is based on the principles of teamwork and the concept of gracious professionalism, which is part of the ethos of FIRST. It’s a way of doing things that encourages high-quality work, emphasizes the value of others, and respects individuals and the community. With GP, fierce competition and mutual gain are not separate notions. Gracious professionals learn and compete like crazy, but treat one another with respect and kindness in the process. GP does not demand that our kindness be returned before we decide to give ours. The importance of GP is to better ourselves, rather than others, becoming responsible citizens and improving our society by example. Years from now our team alumni will remember a great play, some adversities overcome, helping out another team in need, but not so much the plastic trophies collecting dust.","what-we-do#What We Do":"Team 201 members participate in a number of technical and non-technical programs, as described below.","the-first-robotics-competition-frc-and-build#The FIRST Robotics Competition (FRC) and Build":"BuildSeason kickoff is in January on the first Saturday after New Year’s. This is when the new game for the season is revealed worldwide. Robot build season runs from January to March. The team will meet a minimum of 5 days a week, this includes: M-Th from 6:00 to 9:00pm (or later) and Saturday from 9:00am to 5:00 pm (or later). Lunch will be provided during Saturday meetings by the team.CompetitionTeam 201 will participate in a minimum of two Michigan District competitions, typically held from Thursday evening through Saturday evening, with specific dates to be determined by December before. Some events run Friday/Saturday while others run Saturday/Sunday. If students will miss 1 day of school (for each event) to attend a district competition, this will be counted as a school-related excused absence as long as the student has met all team requirements to travel with the team. We rely on parent volunteer drivers (I-Chat approved) to provide transportation to District events.Roughly, the top 160 teams that qualify, after District competitions, go to the Michigan State Championship (Saginaw, MI), typically the second week of April (which may coincide with Spring Break week). Students normally miss 2 days of school (school-related excused absence) if they attend the Michigan State Championships if it is not held during Spring Break week. Team members may be required to pay additional fees to cover registration and meals, depending on team fundraising outcomes.Based on ranking points from the competition season, teams may then qualify for the FRC World Championship held in Houston, TX in late April. Students will miss 6-8 days of school if they attend the World Championships (school-related excused absence).","general-schedule-overview#General Schedule Overview":"Fall – Training, Outreach, & Fundraising\nRecruit new members\nTeam meetings two evenings per week for training and projects\nMentoring FTC teams at RHS\nSpecial Projects (Technical and Non-Technical)\nHosting FIRST events\nOff-season competitions\nFundraising / Sponsorship kickoff\nWinter – Build Season\nJanuary kickoff, followed by robot design and construction\nBrainstorm game play, strategies, robot designs\nConstruction of practice field\nDesign/build/integrate sub-systems\nTest and redesign/rebuild as necessary\nFinal programming integration\nDriver testing/practice\nPreparation for award submissions\nSpring – Competition Season\nRobot fix-it windows to repair/upgrade robot\nTwo three-day district events\nMichigan State Championship, if qualify\nWorld Championship, if qualify and have funds available\nOutreach activities\nSeason assessment\nEnd of Season celebration\nSummer – Team Improvements, Planning, Outreach, & Fundraising\nJune: Break from robotics\nStudent Interviews and Surveys\nLead Assignments for next season\nLeadership Training\nSponsor Retreat\nTeam Cookout\nOutreach events\nTraining Workshops","sub-teams#Sub-teams":"Team tasks are divided into different categories and assigned to the corresponding group or Special Project categories. Each sub-team is led by a student leader(s) and mentor who delegate work to its members. Students may participate in multiple sub-teams, as time and interest allows, but will often be designated as having a primary role while being required to complete 25 points worth of special projects. Tasks outside of the student’s primary role earn special project points. Satisfactory completion of these requirements inform good standing on the team, qualifying students to travel to competition.The functions of the various sub-teams are listed below:","technical-sub-groups#Technical Sub-Groups":"CAD/Design GroupResponsible for designing the robot on the computer. Using the prototypes, they generate CAD (Computer-Aided Design) drawings for the fabrication group to manufacture parts which the mechanical team will use for the completed robot.Programming GroupUses software provided by FIRST to create a program that allows the robot to perform various tasks and functions – both autonomously and by human control. Also builds the interface between the controls and the robot, with input and agreement between the users who will be interacting with the controls, and the mentors.","build-sub-groups#Build Sub-Groups":"Mechanical GroupResponsible for prototyping, assembly, testing, and repair of the robotMachining GroupResponsible for manufacturing customized parts for the robot using the machine shop and its equipment.Electrical GroupResponsible for wiring all motors, compressors, talons, solenoids, etc. The wires shall be labeled and neatly arranged for ease of maintenance. Board layout and packaging must be worked out with the Mechanical group.","people--culture-subgroups#People & Culture Subgroups":"Safety GroupResponsible for reading and ensuring all safety rules are being followed at our build site and at competitions.Business Planning GroupResponsible for developing business plan, monitoring team funds, and coordinating financial activities with our High School business contacts.Marketing/STEM Advocacy GroupResponsible for design and production of team newsletters, sponsor updates, brochures, banners, and other materials in order to present a cohesive team brand. Responsible for keeping a record of team activities through reporting and photography. Responsible for advocacy with stakeholders to support STEM education and FIRST robotics.Spirit GroupResponsible for creation of items to identify and promote the team, such as chants, dances, t-shirts and buttons.Social Media / Website GroupResponsible for creation/maintenance of content presented through the team website and various social media platforms to develop community awareness of FIRST and Team 201.Impact/Awards GroupDetermine which awards the team is working towards, communicate requirements to the team, and develop the award presentations.","competition-work-groups#Competition Work Groups":"Scouting GroupComprised of pit scouts and game scouts. Students in this group will develop materials and methods to assess the competition, giving our team as much advantage as possible. The collection of data and analysis of the information will assist our team in all phases of the competition. Additional students will be assigned scouting duties during competitions.Field Build GroupDesign and build practice field using FIRST specifications for the current year’s game.Drive TeamConsists of a field coach, a controls operator, a robot driver, and a human player. A competitive selection process will be used to identify both a main team and a back-up team.Gracious Professionalism TaskforceThis group builds relationships with other FIRST teams at competitions and identifies ways we can support each other to succeed at competition by pulling resources, lending a hand, and finding resources for teams that need them.","member-expectations#Member Expectations":"Members must maintain academic eligibility as per school policy.\nMembers must wear their team approved apparel at events.\nMembers are expected to earn a minimum of 25 special project points each season.\nMembers will abide by the RCS Code of Conduct and the Acceptable Use for Technology Agreement at all times.\nMembers will communicate their competition-related transportation needs in a timely manner, since transportation is provided by mentors and parents.\nMembers will notify team leadership when they will be absent from required activities via discord.\nMembers must sign up for the team Remind 101 by texting @feds201 to 81010.\nMembers must maintain and monitor an active student and parent email account.\nMembers must sign up for the Discord app and join the FEDS 201 group.\nSocial media accounts using the FEDS 201 name, or referring to the FEDS 201 team, must be overseen by the Operations Committee of the team.\nMembers will attend a minimum of 80% of all team meetings and actively participate when present; 90% for team leads.\nMembers will complete minimum training requirements (satisfactory completion of all introductory training workshops and advanced training or application project by December of first year on the team).\nMembers will pay the membership fees at orientation.\nMembers will meet the individual fundraising requirements by December of each year on the team.\nMembers will demonstrate appropriate behavior at all times in school and at FIRST events, including:\nOperating in accordance to Gracious Professionalism\nDemonstrate good judgment\nRespectful behavior to team colleagues, other teams and officials, using positive behavior and language, including social media\nAbility to commit to and follow through on projects\nAbility to work independently and as a team member\nHonesty and integrity\nTeamwork, cooperation, and mutual respect will take priority during meetings and competition.\nPersonal relationships should not impact the success of our team.\nMentors reserve the right to discipline a team member as necessary for the safety of the student and the overall good of the team. Any infractions that are considered serious will be forwarded to the teacher sponsor and/or high school administration for discipline.","team-member-in-good-standing#Team Member in Good Standing":"All team members are expected to remain in ‘Good Standing’ on the team by adhering to the policies and guidelines outlined in this handbook and in the RCS Code of Conduct and the Acceptable Use Technology Agreement at all times.\nTeam Member in Good Standing privileges:\nStudent is eligible for lead roles (if selected)\nStudent is eligible for participation on the drive team or pit crew (if selected).\nStudent is eligible to attend and be excused from school for competitions\nEarn recognition items such as a varsity letter at year end (note: 2 years of good standing required for varsity letter)","team-201-will-utilize-a-3-warning-policy-as-follows#Team 201 will utilize a 3-warning policy as follows:":"Warnings are defined as:\nFailure to meet team attendance expectations\nFailure to pay team fee without making alternate arrangements (each month past due date is considered a strike)\nFailure to meet individual fundraising expectation (each month past due date is considered a strike)\nFailure to act safely (consistent negligence or single major offense)\nBehavior or engagement inconsistent with the RCS Code of Conduct and/or the Acceptable Use for Technology Agreement.\nWarning One: A written notice of warning will be issued to the student member and parents. The student will remain in good standing with the team.Warning Two: The student will not be in ‘Good Standing’ with the team, and will lose associated privileges. (A written notice will be sent to both the student and parents.)Warning Three: The student shall be removed from the team. (A written notice will be sent to both the student and parents.)","return-to-good-standing#Return to good standing:":"The first warning can be eliminated by 2 consecutive months of ‘Good Standing Performance’ following warning one. (Full payment of team fee will immediately remove a ‘failure to pay’ warning).A student with two warnings will need to submit an essay to the Coach/Teacher Sponsor. The essay shall be an explanation of why the student should be returned to good standing status. If the Coach/Teacher Sponsor accepts the explanation, the student will be returned to good standing, but still has one warning.A student that has received a 3rd warning will be removed from the team. The student may reapply to join the team the following year, but there is no guarantee that membership will be granted. There will be no refund of team fees already paid.Note: Warnings will be tracked by the Lead Mentor I and II, along with School Administrators.","selection-of-student-leads-criteria-roles-and-responsibilities#Selection of Student Leads: Criteria, Roles and Responsibilities":"The Operating Committee will vote to determine which students will be selected as leads of sub-groups. This will be based on student interest as indicated in their exit surveys and end-of-season interviews, experience and their demonstration of the following criteria.\nAttend mandatory leadership training (will be offered by mentors in the summer).\nAttend 90% of all Team Meetings. Coordinate a representative from your sub-group when you cannot attend.\nProvide information/documentation to the Awards team when requested.\nWork with your mentor to create and execute a pre-season, basic training plan so that newer students can contribute during build season.\nDocument subgroup training plans and outcomes.\nEnsure your sub-team completes documentation and keeps it organized, throughout the season such as:\nPhotos\nCurrent challenge design documents, and work log\nBook of Knowledge (generic knowledge of the sub-team)\nEncourage your subteam to demonstrate FEDS values. Participate in outreach, both fundraising and mentoring, attend meetings on time, be prepared, etc. Be an example worth following.","be-an-expert-in-your-area-of-leadership#Be an expert in your area of leadership":"Work with your mentor to determine day to day activities for the sub-team\nBe the primary support/decision maker during idea generation and prototyping.\nGuide newer team members in gaining skills and experience. Help them remain engaged in the sub-team and feel useful.\nKnow who the experts are in your sub-team\nUse them to train and guide less experienced students\nLeverage their help for difficult tasks\nCheck in with your team members frequently. Know what they are working on. Show interest in their work. Guide them if they are struggling. Keep them busy.\nComplete work on time, or alert mentor/other team leads if you cannot.\nBe reliable. Attend 90% of build days. On the days you cannot attend, give notice and provide a representative from your team with enough information to be useful in your absence.\nEnsure that your sub-team follows safety rules and cleans their workspace at the end of each build day.\nLead by example.\nReport out the progress of the sub-team at the end of each build day.","safety#Safety":"In order to run any successful business or team, a high level of safety must be observed, practiced, and maintained. The following rules are designed to ensure the safety of students, mentors, and any visitors to the Rochester High School Shop Area where Team 201 is based.\nSafety glasses must be worn at all times in the shop and while working on the robot and its components, and in the pits at competition.\nHorseplay will not be allowed at any time.\nMembers will be trained and certified by a mentor before using machinery independently.\nAll equipment will be handled with extreme care and caution.\nWork areas will be kept neat and orderly.\nAppropriate footwear with fully enclosed shoes (no sandals or flip flops) must be worn in the shop and at competition.\nHair will be tied back while operating any equipment or standing near equipment that is in operation.\nNo loose clothing is to be worn while operating equipment or standing near equipment that is in operation.\nNo food or drink near any equipment.\nEquipment, tools, and supplies must be put away every night and work areas must be left clean.","parentguardian-responsibilities#Parent/Guardian Responsibilities":"Parents/guardians are encouraged to become team mentors (technical or non-technical). The effort is more than rewarded with the experience of helping young minds grow, and the program runs entirely with volunteer mentors. No mentors = no robotics team. The parents/guardians of the students are an important part of the success of the team.Our team needs actively engaged mentors in the following areas:\nProgramming\nElectrical\nMechanical\nMachining\nCAD Design\nVideography/Editing\nPhotography\nBusiness Planning\nBranding/Marketing\nWebsite Design\nSocial Media\nSafety\nMeal Planning\nWhether you engage as a mentor or a volunteer, you fill a vital role to make this team possible.Generally, each student’s parent/guardian is expected to sign up for a minimum of 4 volunteer slots throughout a season.Additional parent responsibilities include:\nAttend parent meetings\nMake sure students are on time for meetings, build times, and events.\nTimely transportation must also be provided home afterwards. Please be respectful of our volunteer mentors’ time by picking up students on time.\nSign and return permission slips, waiver forms and other required documents by designated due date.\nProvide telephone numbers where they can be reached in an emergency.\nProvide and monitor a dependable email address to receive team correspondence.\nParents/guardians are responsible for the conduct of their child.\nParents/guardians are encouraged to attend all events and provide support for the team.\nParents/guardians are encouraged to keep up-to-date with what their child is working on with the team and the progress that the team has made.\nParents/guardians are encouraged to become team mentors (technical or non-technical), which adds additional responsibilities but is a very rewarding experience.\nNotify the team when students will be absent from a team event where they are expected.","competition-protocol#Competition Protocol":"ParticipationIt is expected that you fulfill your duties as a team member in the role you have agreed to and in any supporting role you can to assist the current needs of the team. Attending competition is a privilege, not a right. Since these events cause students to miss class time, students are expected to remain involved at competition in team related activities (competition, video, photography, pits, scouting, cheering, presentations, etc.). Students not involved in the pits, field activities, or presentations should remain in the stands with the team.\nParticipation in competitions is a lot of fun and encouraged. If you will not be participating in a competition, please let the lead mentor know as soon as possible so that the team can allocate competition duties efficiently and effectively.\nTeam members attending the competitions are required to attend the whole competition. While at competitions, students are expected to perform their assigned duties. Team members are required to remain with the team throughout the entire competition. Failure to do so will result in ineligibility to attend future competitions.\nStudents shall keep their adult mentors informed of their specific activities and whereabouts at all times. Students may not use their own cars or ride in cars belonging to other students during the competition. The buddy system will be strictly enforced. Students must always be with their partner. Students must not be alone at any time.\nUniforms are to be worn at all times during competition and not be covered by other non team apparel.\nApproved eye protection must be worn at all times by all team members and their guests while in the pit areas.\nStudents may be responsible for their meals at competitions.\nBecause travel is required to and from competitions, students not on the official roster for a competition must be accompanied by their parent if they wish to attend the event. Students not on the official roster must not interfere with or interrupt team activities. If they do so, they will be asked to leave and they will jeopardize their future team travel opportunities.\nRoom/Hotel Behavior\nAttendants are guests using the facilities, special care should be taken to not deface or destroy any property. Individuals, who inflict damage to the hotel rooms or the building, will be held liable for any costs incurred for repair.\nCurfew regulations shall be interpreted to mean that each person shall be in his/her hotel room by the published curfew. No team activities will occur after curfew. Room checks will be made nightly by mentors. Once a room check is made, students may not leave their room. Each student shall remain in his/her room until a predetermined time the next morning. Each student will be given the room number and phone number of the mentor(s) to call in case a problem arises during the night.\nStudents of the opposite gender are NOT ALLOWED to enter each other’s room. When possible, we will have a designated room where students can socialize, play cards or watch movies together, while being supervised by a mentor or adult chaperone.\nStudents are expected to be respectful and considerate of hotel roommates when traveling. Students should communicate with each other to reach consensus on sharing the restroom and quiet times.\nOnly people who are on the official team travel roster may be in a team hotel room. Students from other teams, friends or RCS students who are not on the travel roster may not be in the team rooms.\nMentors are responsible for taking all reasonable precautions to ensure the safety of their students and must be readily available in case of an emergency.\nIt is agreed that, upon violation of the RCS Code of Conduct and the Acceptable Use for Technology Agreement, the violators’ parents will be notified. And the violator will be sent home at their parents’ expense. Students violating the Code of Conduct at FIRST competitions will be disqualified from competitive awards.\nSerious misconduct shall be reported to the mentor, teacher sponsor, principal, parents, and if necessary, the proper authorities. Any further disciplinary action will be determined by the school administration and may result in at least one calendar year of ineligibility.","cheering#Cheering":"Gracious professionalism comes into play strongly when we’re in the stands rooting on our team as well as others. We want all the students on all the teams to do well, to feel good about themselves, and to be inspired by the competition. We are supportive and positive at all times under every adverse condition. Demonstrate by example what good sportsmanship is.","awards#Awards":"We will stay until the end of the awards ceremonies. During the ceremony we will applaud the teams that are winning awards. When we applaud we will stand to show our respect for what they have accomplished. During the awards ceremony of competitions, all Members are expected to be in the stands to support their team, with exception of the drive team and pit crew.","event-volunteers#Event Volunteers":"In addition to our team’s volunteer needs, FIRST competition events are run solely by volunteers. Each FRC team is expected to provide a minimum of two volunteers to each event we participate in. These volunteer opportunities are facilitated through the FIRST in Michigan organization directly. The volunteer jobs do not require any prior knowledge of FIRST robotics. Please consider volunteering your time. In January of the current season, volunteer information can be found here.","safety-at-competitions#Safety at Competitions":"Safety should be practiced at all times. Safety glasses must be worn in the pits by all members – students and adults.","how-parents-participate#How Parents Participate":"GeneralRecruit other parents, retirees, sponsor mentors, etc. Network through friends, family or co-workers.Be an advocate for our team and FIRST with the school district and in our community. Help your student attend team meetings by driving or arranging car pools.Technical Mentor\nGeneral technical or engineering backgrounds, machinists, etc.\nWillingness to take a backseat and let students experiment, but to step-in when they need to learn something new.\nMentoring needed for: structural, mechanical, electrical, pneumatic, control systems, CAD, computer animation, website, programming, safety\nNon-Technical Mentor\nWork with students in any of these areas:\nOrganizational, management skills for running the team and coordinating meetings\nWriting essays and creating presentations for award submissions, college scholarship essays, promotional literature, competition judge presentation materials\nArt needed to decorate the Robotics room, our pit, shipping crate, website\nCrafts to develop spirit accessories and team awards given to other teams\nSupport Functions\nFeeding the team during the build Jan/Feb season\nSolicit sponsors for cash donations, materials, engineering mentors, tools, machining, excess equipment, or material clearances\nFundraising\nCan (deposits) drive fundraiser in the late fall; Barnes & Noble gift wrap in Nov-Dec\nPays for FIRST and off-season competitions, transportation, travel food and offsets individual student expenses\nTravel/Events\nCoordinate permission slip creation with school sponsor\nTravel arrangements (bus, hotel, restaurant)\nArrange to feed the team during competitions\nRecruit and schedule trip drivers and chaperones\nSpirit preparation\nCollect/manage fees for travel\nT-shirt orders\nTeam handouts for competition\nOrganize team building exercises\nPublicity and public relations\nBaking treats for competitions\nPromote team before the school board and administration\nTeacher/mentor/sponsor/senior awards and thank you’s\nVideotaping/photography for meetings, mentoring, outreach\nEnd of season pot-luck party\nCoaching Business/Marketing team on business plan writing, branding plans, website development and social media presence\nPlan off-season events (Robo-Con, Maker’s Fair, Kettering Kick-off event, Alpena)\nConnect our team to other schools’ robotics and/or STEM programs\nSew bumpers for our robot to sport at competition\nChaperone students at the Fall Club Door Decorating event hosted by Student Council\nChaperone students in creating robot décor for the Rochester Christmas parade\nProvide students a specialized training in your area of expertise, tying it to robotics\nHelp Marketing group design newsletter layouts/provide editorial consultation\nWrite press releases and distribute about our team’s activities\nParents of returning students: help us at the new parent/student orientation\nMake name tags for all students/mentors/parent volunteers by end of September\nChaperone students to elementary and middle schools where they mentor younger robotics’ teams\nOversee videography efforts of the Chairman’s group\nWrite PTSA and/or RCS Foundation grant applications for the team\nChaperone Barnes and Noble gift wrap session\nChaperone students at the 8th Grade Parent Night (promote robotics)\nReturning parents: assist mentors at mandatory parent meetings prior to competitions to collect documents, make copies and plan travel\nChaperone students at the PTSA STEAM fair and other STEM events in the community\nPlan team building activities after the end of the season\nHelp the team host an elementary level STEM event","additional-reasons-to-become-involved-in-the-robotics-program-college--career-opportunities#Additional Reasons to Become Involved in the Robotics Program: College & Career Opportunities":"The FEDS FIRST program is an excellent way to explore careers of engineering, communication, creative design, marketing and many other technical areas. During this program, students will be exposed to many principles of engineering, marketing, and various mentoring skills of professionals. We recognize the possibility that not all students will go on to careers in engineering. It is our goal, however, to expose all the students to technological careers including but not limited to engineering.","scholarship-opportunities#Scholarship Opportunities":"FIRST offers over $80 million in scholarship opportunities to team members annually. While many of the scholarships are designed for those seeking degrees in engineering, math, and science, there are many that are available for any area of study. The FIRST website (www.firstinspires.org) has a complete listing and additional information."}},"/Mechanical/DesignGuidelines":{"title":"Designguidelines","data":{}},"/Mechanical/Index":{"title":"Welcome to the Mechanical Subgroup","data":{"":"Mechanical Subgroup - FEDS201\nWelcome to the Mechanical Subgroup of FEDS201! This section is dedicated to providing resources, sharing experiences, and documenting the challenges and solutions encountered by our mechanical team over the years.","what-you-will-find-here#What You Will Find Here":"","resources#Resources":"We have compiled a list of valuable resources to help you with your mechanical projects. These include:\nDesign Guidelines: Best practices for designing mechanical components.\nMaterial Selection: Information on different materials and their properties.\nTools and Equipment: A guide to the tools and equipment commonly used in our projects.","problems-faced#Problems Faced":"Over the years, our team has encountered various challenges. Here, we document these problems along with the solutions we found:\nAlignment Issues: Techniques for ensuring precise alignment of components.\nMaterial Fatigue: How to identify and mitigate material fatigue in your designs.\nTool Wear: Tips for maintaining and extending the life of your tools.","notes-and-learnings#Notes and Learnings":"Our team has taken extensive notes during our projects. These notes include:\nProject Logs: Detailed logs of past projects, including successes and failures.\nMeeting Minutes: Summaries of our team meetings, highlighting key decisions and action items.\nTechnical Insights: In-depth technical insights and tips from experienced team members.","getting-started#Getting Started":"To get started, we recommend reviewing the following sections:\nDesign Guidelines\nMaterial Selection\nTools and Equipment\nIf you have any questions or need further assistance, feel free to reach out to any of the mechanical team members. We are here to help you succeed!","contributing#Contributing":"We encourage all team members to contribute to this section. If you have any valuable insights, resources, or experiences to share, please do so. Together, we can build a comprehensive knowledge base that will benefit current and future members of the Mechanical Subgroup.Thank you for being a part of FEDS201 and contributing to our mechanical projects. Let's build something great together!\nIf you have any suggestions for improving this section, please let us know. Your feedback is invaluable!"}},"/Mechanical/MaterialSelection":{"title":"Materialselection","data":{}},"/Mechanical/OnlineResourses/UsefulLinks":{"title":"Usefullinks","data":{"":"Here you will find helpful links for mechanical Purposes:Videos:\n3560 Mechanical Concepts 1\n3560 Mechanical Concepts 3\n3560 Mechanical Concepts 4\n3560 Mechanical Concepts 5\n3847 Intro to FRC Mechanisms\nLinks:\n3847 Robot Mechanisms\nMechanical Design Calculator]\n3847 Design Concepts\nDocuments:\nNASA RAP Design Guide\r\n-- This document is amazing!! One of the most complete FRC design resources available!\n610 Design Tutorials"}},"/Mechanical/ToolsAndEquipment":{"title":"Toolsandequipment","data":{"":"Here are some measurements and standards for tools and fasteners used in our shop\nBolt Size\tColor\tAllen (cap)\tAllen (flat/button)\tTorx (flat/button)\tWrench\tThrough Drill\tTap Drill\t10-32\tRed\t5/32\t1/8\tT25\t3/8\t.201 (7)\t.159 (21)\t1/4-20\tBlue\t3/16\t5/32\tT27\t7/16\t.266 (H)\t.201 (7)\t8-32\tWhite\t9/64\t3/32\tT15\t11/32\t.177 (16)\t.136 (29)"}},"/PandC/Index":{"title":"Welcome to the People & Culture Section","data":{"":"People & Culture - FEDS Handbook\nWelcome to the People & Culture section of the FEDS Handbook! Here, you will find all the resources and tools you need to understand and contribute to the culture and community of FRC Team 201.","our-mission#Our Mission":"Our mission is to foster a positive and inclusive environment where every team member feels valued and empowered to contribute their best.","key-areas#Key Areas":"","robotics#Robotics":"Discover our STEM CADettes program.\nLearn about our FLL Teams.\nDiscover our FTC Teams.\nFind out about our FTC Competitions.\nDiscover our FLL Tournaments.\nFind out about our Robot Challenge.","family#Family":"Learn about the core values that guide our team's actions and decisions.\nDiscover our commitment to creating a diverse and inclusive team environment.\nExplore our mentorship program and how you can get involved.\nLearn about our fundraising efforts.\nDiscover our business plan.\nDiscover our special projects.\nDiscover our Annual Banquet.","key-days#Key Days":"Find information about upcoming team events and activities.\nGet information about FEDS Orientation.\nLearn about our leadership training programs.\nGet information about FEDS Day.\nLearn about FTC FEDS Day.\nLearn about G201.","outreach#Outreach":"Learn about the impact of our initiatives.\nFind out about our summer workshops.\nLearn about Operation FIRST.\nDiscover Operation Outreach.\nLearn about Operation Global.\nGet information about FEDS Travel.\nIf you have any questions or suggestions, feel free to reach out to the People & Culture team."}},"/Programming/Autonomous/Index":{"title":"Autonomus","data":{"step-1#Step 1":"Create all the commands the robot needs to execute. This includes the capabillity to drive.","step-2#Step 2":"Use PathPlanner to build autos!!!"}},"/Programming/Autonomous/PathPlanner/NamedCommands":{"title":"Named Commands","data":{"":"You must register your named commands so that they can be used in the creation of Event Markers and Autos. All of your named commands need to be registered before you create a PathPlanner path or auto in your code. Failure to do so would mean that any named command registered after path/auto creation will not be used in those paths and autos.All named commands are registered via static methods in the NamedCommands class. The string used when registering a command should be identical to the one used in the PathPlanner GUI.\nNamed commands must be registered before the creation of any PathPlanner Autos or Paths. It is recommended to do this in RobotContainer, after subsystem initialization, but before the creation of any other commands.","examples#Examples":"public class RobotContainer() {\r\n    public RobotContainer() {\r\n        // Subsystem initialization\r\n        swerve = new Swerve();\r\n        exampleSubsystem = new ExampleSubsystem();\r\n\r\n        // Register Named Commands\r\n        NamedCommands.registerCommand(\"autoBalance\", swerve.autoBalanceCommand());\r\n        NamedCommands.registerCommand(\"exampleCommand\", exampleSubsystem.exampleCommand());\r\n        NamedCommands.registerCommand(\"someOtherCommand\", new SomeOtherCommand());\r\n\r\n        // Do all other initialization\r\n        configureButtonBindings();\r\n\r\n        // ...\r\n    }\r\n}"}},"/Programming/Autonomous/PathPlanner/PathsAndAutos":{"title":"Editing Paths and Autos","data":{"":"Microsoft PathPlanner Download: \nMac PathPlanner Download:","paths#Paths":"In PathPlanner, paths are used to create one continuous motion from some start point to an end point. In other words, each path describes a singular segment of an autonomous routine.","examples#Examples":"Driving from the start point to pick up a game piece\nDriving from the game piece to a scoring position\nDriving from the scoring position to an end position","waypoints#Waypoints":"Within paths, waypoints are the positions on the field the define the shape of the spline that the robot will follow. Each waypoint consists of two types of points: anchor points and control points. Anchor points define the exact position that the spline will pass through, and control points are used to define the heading, or tangent, of the spline as well as to fine-tune the shape of the spline via the control point's distance from its associated anchor point.Waypoints can be added to a path by double-clicking on the field within the path preview. A new waypoint will be added to the end of the path at the clicked location. Waypoints can be edited by click and drag in the path preview, or via the waypoints tree.","autos#Autos":"In PathPlanner, autos are used to define a complete autonomous routine. These can then be loaded as a full autonomous command in robot code via PathPlannerLib's auto builder functionality. Each autonomous routine is defined as a sequential command group populated with path following commands, named commands (same as the ones used in path event markers), wait commands, or nested command groups. Path following commands allow you to select any path in the project, this functions as a modular system allowing you to reuse the same path across multiple auto routines.\nThe paths chained together in an auto routine do not need to have their start/end positions aligned. PathPlannerLib path following commands will automatically handle transitioning between paths by default if their start/end positions do not align. However, it is your responsibility to ensure that any unaligned start/end positions or sharp angles where paths join will not cause any issues. Discontinuities shouldn't typically be a problem for holonomic drive trains unless you are transitioning between paths with a high velocity. You should avoid discontinuities with a differential drivetrain, unless paths are transitioning between a normal and a reversed path at 180 degrees.","command-group#Command group":"The command group tree is used to define the entire autonomous routine within a sequential command group. This command tree works the same as the command tree for event markers. Commands can be added, removed, or reordered. The same rules that apply to command groups when creating them programmatically still apply here.\nYou must hit enter after typing in new names to the named commands dropdown for the new name to be saved."}},"/Programming/Autonomous/PathPlanner/Settings":{"title":"Settings","data":{"":"The settings menu can be accessed via the Navigation Menu","robot-attributes#Robot Attributes":"Robot Width - The width of the robot, including bumpers, in meters. Used for visualization.\nRobot Length - The length of the robot, including bumpers, in meters. Used for visualization.\nMax Module Speed - The max speed of a swerve module in meters per second. This does not directly affect paths, but will make the robot's rotation speed in previews more closely match reality.","default-constraints#Default Constraints":"These values will be used as the default global constraints when creating new paths. Updating these values will also update the constraints of any paths set to use the defaults.\nMax Velocity - Max linear velocity in meters per second.\nMax Acceleration - Max linear acceleration in meters per second squared.\nMax Angular Velocity - Max rotational velocity in degrees per second.\nMax Angular Accel - Max rotational acceleration in degrees per second squared.","other-settings#Other Settings":"Field Image - Select the field image used as the background of the editor. This contains options for official field images and the ability to import custom images.\nTheme Color - Change the UI theme color.\nHolonomic Mode - Enable or disable holonomic mode. This is on by default. This must be enabled to access special features for holonomic drive trains.\nHot Reload - Enable or disable hot reload for paths and autos. This is off by default. When connected to the robot, hot reload will automatically sync changes to paths and autos in the GUI to the paths and autos loaded in robot code. This allows you to quickly iterate and test changes without needing to redeploy or restart robot code. PLEASE, PLEASE, PLEASE disable this at competition, so you don't accidentally change a path on the robot that you do not wish to.\nPPLib Telemetry - The host address of the robot for use in telemetry and hot reload.\nIf running simulation, this should be localhost. If connected to a robot, this should be the IP address of the roboRIO: 10.TE.AM.2 where TEAM is replaced by your team number, i.e. 10.30.15.2."}},"/Programming/Autonomous/PathPlanner/Telemetry":{"title":"Telemetry","data":{"":"The telemetry page shows real time data from PathPlannerLib path following commands when connected to the robot for use in debugging or fine-tuning.The field preview at the top of the page will show the path currently being followed, the target robot pose in grey, and the actual robot pose in white.At the bottom of the page are three graphs representing the target and actual velocity, target and actual angular velocity, and the path following inaccuracy. The Y axis range of each graph is currently fixed and does not support a dynamic range at this time. The velocity graph Y axis ranges from 0 to 4 meters/second, the angular velocity graph Y axis ranges from -2pi to 2pi radians/second. The path inaccuracy graph Y axis ranges from 0 to 1 meter."}},"/Programming/BasicJava/javaintro":{"title":"Introduction to Java - Hello, World!","data":{"":"Java is a versatile and powerful programming language widely used in a variety of applications, from web development to mobile apps. In the context of FIRST Robotics Competition (FRC),\r\nJava plays a critical role in programming robots. Java is the primary language used for writing control code that drives the behavior of FRC robots, thanks to its ease of use,\r\nobject-oriented design, and integration with powerful libraries and frameworks.FRC teams (Like the FEDS!) choose Java because:\nCross-Platform Compatibility: Java can run on different systems, meaning the same code can be developed and tested on a wide variety of machines.\nRobust Libraries: Java offers extensive libraries to handle everything from sensors to motors and communication, making it perfect for controlling complex robot systems.\nSupport and Documentation: Java has been used for FRC programming for many years, and there is a large community providing support and resources to help teams.\nObject-Oriented Design: Java's object-oriented nature helps structure code in a manageable and reusable way, which is crucial when building and maintaining complex robot programs.\nIn this guide, we'll start with a simple introduction to Java and explain how to write a basic \"Hello, World!\" program to get you started.","what-is-java#What is Java?":"Java is a high-level, object-oriented programming language designed to be simple, secure, and portable.","why-java-for-frc#Why Java for FRC?":"FRC teams use Java to program their robots primarily because of the WPILib library, which provides everything needed to control robot hardware (such as motors, sensors, and cameras).\r\nJava is integrated with this library, making it the go-to choice for teams who want to develop software for controlling their robots.","your-first-java-program-hello-world#Your First Java Program: \"Hello, World!\"":"Before diving into complex robot programming, let’s take a look at a basic Java program that outputs \"Hello, World!\" to the screen. This will help you get familiar with Java’s syntax.","code-example#Code Example":"public class HelloWorld {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"Hello, World!\");\r\n    }\r\n}","code-explanation#Code Explanation":"public class HelloWorld:\nThis line defines a class named HelloWorld. In Java, every program must be inside a class, which serves as a blueprint for creating objects.\npublic means the class is accessible to other parts of the program.\npublic static void main(String[] args):\nThis is the main method, the entry point of any Java application. When you run a Java program, the execution starts from the main method.\npublic: The method is accessible from anywhere.\nstatic: The method can be called without creating an instance of the class.\nvoid: The method does not return any value.\nString[] args: This allows the program to accept arguments from the command line (we won’t use them in this simple program).\nSystem.out.println(\"Hello, World!\");:\nThis line prints the text \"Hello, World!\" to the console. System.out refers to the output stream (the console in this case), and println() is used to print a line of text.","conclusion#Conclusion":"Congratulations! You’ve just written your first Java program. While this example is simple, it demonstrates the basic structure of a Java program, including how to define classes and methods, as well as how to print output to the screen.In FRC programming, Java is used in a similar way to control robot behavior, but with added complexity such as motor control, sensor integration, and autonomous routines.\r\nNow that you've gotten a quick introduction of Java, you're ready to move onto more java concepts and code.","onwards-in-java#Onwards in Java":"We HIGHLY recommend that you take a java tutorial online like w3 School's Java Tutorial. This is going to help you GREATLY when learning and understanding the FRC Java code we sample throughout the Programming documentation.Most of all, Happy coding!"}},"/Programming/Examples/PID":{"title":"Year 2023-24 SPYDER","data":{"":"Spyder 2023-24 - FEDS201","what-is-pid#What is PID?":"PID stands for Proportional, Integral, Derivative. It is a control loop feedback mechanism that is used to control systems. PID is used to control the speed of the robot, the position of the robot, and the angle of the robot. PID is used in many different applications such as robotics, automation, and control systems.","how-does-pid-work#How does PID work?":"PID works by using three different components: Proportional, Integral, and Derivative. The Proportional component is used to control the current error of the system. The Integral component is used to control the past error of the system. The Derivative component is used to control the future error of the system. By using these three components, PID is able to control the system and keep it stable.","how-to-implement-pid-in-frc#How to implement PID in FRC?":"To implement PID in FRC, you will need to create a PID controller. A PID controller is a class that is used to control the system using PID. The PID controller will take in the setpoint, the current value, and the output value. The PID controller will then calculate the error, the proportional value, the integral value, and the derivative value. The PID controller will then calculate the output value and send it to the system.","pid-controller-class#PID Controller Class":"private PIDController pidController;\r\n\r\npublic void initPID() {\r\n    pidController = new PIDController(0.1, 0.01, 0.001);\r\n    pidController.setSetpoint(0);\r\n    pidController.setTolerance(0.1);\r\n    pidController.enableContinuousInput(-180, 180);\r\n    pidController.enable();\r\n}","using-pid-controller#Using PID Controller":"public void usePID() {\r\n    double output = pidController.calculate(currentValue);\r\n    system.setOutput(output);\r\n}","conclusion#Conclusion":"PID is a powerful control loop feedback mechanism that is used to control systems. PID is used in many different applications such as robotics, automation, and control systems. By using PID, you can control the speed of the robot, the position of the robot, and the angle of the robot. PID is a powerful tool that can be used to control systems and keep them stable."}},"/Programming/Examples/SafetyMode/Index":{"title":"Robot Safety Framework","data":{"":"Robot Safety Framework - FEDS201","introduction#Introduction":"This document is a work in progress. It is intended to provide a framework for the safety of robots. It is not intended to be a comprehensive guide to robot safety, but rather a starting point for the development of a safety program for robots.","definitions#Definitions":"A monitoring System: A system that monitors the robot and its environment to detect unsafe conditions.\nA control System: A system that controls the robot to prevent unsafe conditions.\nA safety System: A system that ensures the safety of the robot and its environment.","safety-framework#Safety Framework":"The safety framework consists of three main components: a monitoring system, a control system, and a safety system.","monitoring-system#Monitoring System":"The monitoring system is responsible for monitoring the robot and its environment to detect unsafe conditions. The monitoring system should be able to detect a wide range of unsafe conditions, including:\nCollision Detection: The monitoring system should be able to detect collisions between the robot and other objects in its environment.\nObstacle Detection: The monitoring system should be able to detect obstacles in the robot's path and take appropriate action to avoid them.\nEmergency Stop: The monitoring system should be able to detect when an emergency stop is required and take appropriate action to stop the robot.","control-system#Control System":"The control system is responsible for controlling the robot to prevent unsafe conditions. The control system should be able to prevent a wide range of unsafe conditions, including:\nCollision Prevention: The control system should be able to prevent collisions between the robot and other objects in its environment.\nObstacle Avoidance: The control system should be able to avoid obstacles in the robot's path and take appropriate action to avoid them.\nEmergency Stop: The control system should be able to stop the robot in an emergency situation.","safety-system#Safety System":"The safety system is responsible for ensuring the safety of the robot and its environment. The safety system should be able to ensure the safety of the robot in a wide range of situations, including:\nSafe Operation: The safety system should ensure that the robot is operated safely in all situations.\nSafe Environment: The safety system should ensure that the robot's environment is safe for operation.\nSafe Design: The safety system should ensure that the robot is designed to be safe for operation."}},"/Programming/Examples/Vision/LimelightOS/CustomLib":{"title":"Year 2023-24 SPYDER","data":{"":"Spyder 2023-24 - FEDS201","using-multiple-cameras-work-around#Using Multiple Cameras (Work Around)":"Since we used Limelight OS, we can't use multiple cameras. However, we can use a workaround to use multiple cameras. We can use the VisionABC class to create a new camera server and stream the camera feed to the dashboard.","visionabc-class#VisionABC Class":"package frc.robot.subsystems.Vision;\r\n\r\nimport edu.wpi.first.math.geometry.Translation2d;\r\nimport edu.wpi.first.wpilibj2.command.Command;\r\nimport edu.wpi.first.wpilibj2.command.CommandScheduler;\r\nimport edu.wpi.first.wpilibj2.command.SubsystemBase;\r\nimport frc.robot.subsystems.SubsystemABC;\r\nimport frc.robot.subsystems.Vision.utils.VisionObject;\r\n\r\npublic abstract class VisionABC extends SubsystemBase {\r\n\r\n\r\n\r\n  public VisionABC() {}\r\n\r\n  public abstract void periodic();\r\n  public abstract boolean CheckTarget();\r\n  public abstract Translation2d GetTarget(VisionObject object);\r\n  public abstract void setPipeline(int pipeline);\r\n  public abstract void setLEDMode(int mode);\r\n  public abstract void setCamMode(int mode);\r\n  public abstract Command BlinkLED();\r\n  public abstract Command TurnOffLED();\r\n\r\n  /**\r\n   * This method is called periodically by the {@link CommandScheduler}. Useful for updating\r\n   * subsystem-specific state that needs to be maintained for simulations, such as for updating\r\n   * {@link edu.wpi.first.wpilibj.simulation} classes and setting simulated sensor readings.\r\n   */\r\n  @Override\r\n  public abstract void simulationPeriodic();\r\n\r\n  public Boolean enabled;\r\n}","creating-a-new-camera-from-visionabc#Creating a new camera from VisionABC":"package frc.robot.subsystems.Vision.camera;\r\n\r\nimport edu.wpi.first.wpilibj2.command.CommandBase;\r\nimport edu.wpi.first.wpilibj2.command.CommandGroupBuilder;\r\nimport edu.wpi.first.wpilibj.networktable.NetworkTable;\r\nimport edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;\r\n\r\npublic abstract class Back_Camera {\r\n\r\n    public static Back_Camera getInstance() {\r\n        return INSTANCE;\r\n    }\r\n\r\n    @Override\r\n    public abstract void periodic();\r\n\r\n    @Override\r\n    public abstract boolean CheckTarget();\r\n\r\n    @Override\r\n    public abstract void setPipeline(int pipeline);\r\n\r\n    @Override\r\n    public abstract void setLEDMode(int mode);\r\n\r\n    @Override\r\n    public abstract void setCamMode(int mode);\r\n\r\n    public static abstract class VisionCommand extends CommandBase {\r\n    }\r\n\r\n    private static final Back_Camera INSTANCE = new Back_Camera() {\r\n        private final ShuffleboardTab tab = Shuffleboard.getTab(\"BackCamera\");\r\n        private final NetworkTable table = NetworkTableInstance.getDefault().getTable(CameraConstants.BackCam.BACK_CAMERA_NETWORK_TABLES_NAME);\r\n        private final VisionObject tagCenter = new VisionObject(0, 0, 0, ObjectType.APRILTAG);\r\n\r\n        @Override\r\n        public void periodic() {\r\n            tagCenter.update(\r\n                    table.getEntry(\"tx\").getNumber(0).doubleValue(),\r\n                    table.getEntry(\"ty\").getNumber(0).doubleValue(),\r\n                    table.getEntry(\"ts\").getNumber(0).doubleValue()\r\n            );\r\n            SmartDashboard.putBoolean(\"Target Found\", CheckTarget());\r\n            SmartDashboard.putNumber(\"Distance\", tagCenter.getDistance());\r\n            SmartDashboard.putNumber(\"X\", tagCenter.getX());\r\n            SmartDashboard.putNumber(\"Y\", tagCenter.getY());\r\n        }\r\n\r\n        @Override\r\n        public boolean CheckTarget() {\r\n            return table.getEntry(\"tv\").getNumber(0).intValue() == 1;\r\n        }\r\n\r\n        @Override\r\n        public void setPipeline(int pipeline) {\r\n            // Implement setting pipeline using LimelightHelpers.setPipelineIndex(nt_key, pipeline);\r\n        }\r\n\r\n        @Override\r\n        public void setLEDMode(int mode) {\r\n            // Implement setting LED mode using LimelightHelpers.setLEDMode_* methods based on mode\r\n        }\r\n\r\n        @Override\r\n        public void setCamMode(int mode) {\r\n            // Implement setting camera mode using LimelightHelpers.setCameraMode_* methods based on mode\r\n        }\r\n    };\r\n}\r\nWith this, we can create multiple cameras and stream them to the dashboard. This is a workaround to use multiple cameras with Limelight OS.","training-a-custom-detector-model-for-limelight#Training a Custom Detector Model for Limelight":"To train a custom detector model for Limelight, you will need to collect and annotate images of objects of interest.\nAnnotation is the process of drawing bounding boxes around objects of interest.\nThis can be done within Roboflow's web interface. You can also use a public dataset from Roboflow Universe.\nOnce you have a dataset, you can export it as a .tfrecord file and upload it to Google Drive.","google-colab#Google Colab":"You can use Google Colab to train neural networks using powerful GPUs on the cloud for free.\nThe Limelight Training Notebook expects a zipped .tfrecord dataset.","dataset-tips#Dataset Tips":"","maximize-dataset-diversity#Maximize Dataset Diversity:":"Your dataset should include a wide variety of images that represent all the different conditions your Limelight might encounter during a match.\nThis includes different lighting conditions, angles, distances, and object orientations.","quality-and-accuracy#Quality and Accuracy:":"The images in your dataset should be clear and the objects of interest should be easily distinguishable.\nWhen annotating your images (drawing bounding boxes around the objects of interest), make sure the boxes are as accurate as possible.","bounding-box-convention#Bounding Box Convention:":"Decide on a convention for drawing bounding boxes and stick to it.\nFor example, if an object is partially occluded (hidden),the bounding box should only cover the visible part of the object.","class-labels#Class Labels:":"The class labels (the names of the objects you're detecting) should be all in lowercase and kept to a minimum.\nThis makes the training process more efficient.","use-roboflows-augmentations#Use Roboflow's Augmentations:":"Roboflow provides image augmentations that can artificially increase the diversity and size of your dataset.\nHowever, make sure the augmentations you use make sense for your specific task. For example, if you're detecting red and blue balls, avoi","recommended-platforms#Recommended Platforms:":"We used Roboflow to create a public dataset and export it as a .tfrecord file.\nRoboflow also has builtin annotation tool.\nWe used Google Colab to train the model using the Limelight Training Notebook.\nGoogle Colab provides free access to GPUs and TPUs.","training-the-model#Training the Model":"To train your custom detector, start a Google Colab Session with the Limelight Detector Training Notebook. The Notebook does not require any code changes. Once the training script is running, you can refresh the files pane and tensorboard to monitor progress. A new checkpoint should appear in the \"training_progress\" folder every 2000 steps. While training will automatically stop at 40000 steps, you can stop it at any point with the stop button in the final code block of this section. As long as checkpoints are available, you can more forward to quantization and compilation.","upload-to-limelight#Upload to Limelight":"Once you have trained your model, you will need to convert it to a compatible FlatBuffer format and quantize it for INT8 / 8bit inference. Then, you can prepare the model for Google Coral and Limelight. The final code block will take some time, and it will download the trained model as a .zip file. You will then need to unzip the archive from your Colab session. Finally, you will need to upload the limelight_neural_detector_coral.tflite and the labels.txt files to your Limelight.\nSuccess! You have successfully trained a custom detector model for Limelight. You can now use this model to detect objects of interest in your robot's environment.","conclusion#Conclusion":"We can use the above steps to train vision models for the robot. This will help us to detect the target accurately and improve the performance of the robot.\nMore Documentation Coming soon..! 🎉","references#References":"Limelight Documentation\nWPILib Documentation","contributors#Contributors":"Ritesh Raj"}},"/Programming/Examples/Vision/LimelightOS/DistanceEstimation":{"title":"Behind the Scenes: Distance Estimation","data":{"":"Distance Estimation - FEDS201\nIf your vision tracking camera is mounted on your robot such that the angle between the ground plane and its line of sight does not change, then you can use this technique to very accurately calculate the distance to a target. You can then use this distance value to either drive your robot forward and back to get into the perfect range or adjust the power of a launching mechanism.See the below diagram. In this context, all of the variables are known: the height of the target (h2) is known because it is a property of the field. The height of your camera above the floor (h1) is known and its mounting angle is known (a1). The Limelight (or your vision system) can tell you the y angle to the target (a2).","sample-code-for-distance-estimation#Sample Code for Distance Estimation":"NetworkTable table = NetworkTableInstance.getDefault().getTable(\"limelight\");\r\n    NetworkTableEntry ty = table.getEntry(\"ty\");\r\n    double targetOffsetAngle_Vertical = ty.getDouble(0.0);\r\n\r\n    // how many degrees back is your limelight rotated from perfectly vertical?\r\n    double limelightMountAngleDegrees = 25.0;\r\n\r\n    // distance from the center of the Limelight lens to the floor\r\n    double limelightLensHeightInches = 20.0;\r\n\r\n    // distance from the target to the floor\r\n    double goalHeightInches = 60.0;\r\n\r\n    double angleToGoalDegrees = limelightMountAngleDegrees + targetOffsetAngle_Vertical;\r\n    double angleToGoalRadians = angleToGoalDegrees * (3.14159 / 180.0);\r\n\r\n    //calculate distance\r\n    double distanceFromLimelightToGoalInches = (goalHeightInches - limelightLensHeightInches) / Math.tan(angleToGoalRadians);","explanation#Explanation":"The above code calculates the distance from the Limelight to the target. The Limelight is mounted at a known angle to the ground, and the target is at a known height above the ground. The Limelight can measure the angle to the target, and the code calculates the distance to the target using trigonometry.","how-to-use#How to Use":"Mount your camera at a known angle to the ground.\nMeasure the height of the camera lens above the ground.\nMeasure the height of the target above the ground.\nUse the Limelight to measure the angle to the target.\nUse the code above to calculate the distance to the target.","additional-notes#Additional Notes":"The code above assumes that the target is directly in front of the camera. If the target is off to the side, you will need to adjust the calculations accordingly.\nThe code above assumes that the target is at a known height above the ground. If the target is at an unknown height, you will need to use a different method to calculate the distance.","conclusion#Conclusion":"Distance estimation is a powerful tool that can be used to improve the accuracy of your robot. By knowing the distance to a target, you can adjust your robot's position or power output to achieve the desired result. This can be especially useful in tasks such as shooting a ball into a goal or picking up an object from the ground. By using the Limelight to measure the angle to the target and the height of the camera above the ground, you can calculate the distance to the target and use this information to improve the performance of your robot.","references#References":"Limelight Documentation\nLimelight Distance Estimation\nLimelight Mounting\nLimelight Target Tracking"}},"/Programming/PastProblems+Solutions/2024-2025":{"title":"2024 2025","data":{"":"2024-2025 Problems + Solutions - FEDS201"}},"/Programming/Subsystems/Arm":{"title":"Arm","data":{"":"Arm - FEDS201","what-can-an-arm-do#What can an arm do?":"An arm subsystem can accomplish many unique tasks, some of which include Climbing, Placing game pieces, and raising other subsystems.\r\nArms commonly use Motors and encoders to rotate and keep track of rotation when in use.","example-arm-code#Example Arm Code":"public class Arm extends SubsystemBase {\r\n\r\n    public static TalonFXConfiguration GetArmMotorConfiguration() {\r\n      TalonFXConfiguration configs = new TalonFXConfiguration();\r\n\r\n      MotorOutputConfigs motorOutputConfigs = configs.MotorOutput;\r\n      motorOutputConfigs.NeutralMode = NeutralModeValue.Brake; //When output of the motor is neutral or disabled, Put the motor in brake mode.\r\n      \r\n      return configs;\r\n   }\r\n\r\n    public static PIDController GetArmPID() {\r\n         PIDController pid = new PIDController(0.195, 0.015, 0);\r\n         pid.setTolerance(1); //Error that is considered Tolerable as the setpoint\r\n         pid.setIZone(Double.POSITIVE_INFINITY); //Disables Izone because value is infinity\r\n         pid.setIntegratorRange(-0.05, 0.05); //Limits I term to a minimum of -0.05 and maximum of 0.05\r\n         return pid;\r\n      }\r\n\r\n  private final TalonFX armRotation; \r\n  private final DutyCycleEncoder armRotationEncoder;\r\n\r\n  private final PIDController pid = GetArmPID();\r\n\r\n   public Arm() {\r\n    \r\n    armRotation = new TalonFX(CANConstants.Arm.kArm);\r\n    armRotation.getConfigurator().apply(GetArmMotorConfiguration());\r\n    armRotationEncoder = new DutyCycleEncoder(DIOConstants.Arm.kArmRotateEncoder);\r\n   }\r\n}\nThis code creates an TalonFX motor, Duty Cycle Encoder, and PID Controller, All of which are used to control an arm.\nThe TalonFX motor and DutyCycleEncoder both use ID's to differentiate themselves from other encoders / motors on a robot. In this case, the IDs are stored in seperate constants files for organization.\n Learn more about PID control in the PID section.","setting-arm-limits#Setting Arm Limits":"Arms usually have a limited range of motion when they are a part of a robot. However, the motor does not know this by default, and moving the arm further than its range would almost definitely break the robot or the arm. This can be combatted by setting an Arm rotation limit.","example-code#Example code":"public void rotateOrHold(double power) {\r\n    SmartDashboard.putNumber(\"power to the arm\", power);\r\n    if(Math.abs(power) < ArmConstants.kHoldThreshold) { // if there is no power to the controller, hold\r\n      hold();\r\n    } else if(getArmAngle() < 5 && power < 0) { // if you are falling and the angle is less than 5, then dont move\r\n      setOutput(0);\r\n      setArmHoldActive(false);\r\n    } else if (getArmAngle() > 90 && power > 0) { // if you are rising and the angle is greater than 90, then hold 90\r\n      hold(90);\r\n    } else { // else move using the output from the controller\r\n      setOutput(power);\r\n      setArmHoldActive(false);\r\n    }\r\n  }\nThe Hold function sets the PID setpoint to the given angle.\n public void hold(double angle) {\r\n    if(!getArmHoldActive()) {\r\n      setArmHoldAngle(angle);\r\n      setArmHoldActive(true);\r\n      setPIDTarget(getArmHoldAngle());\r\n    }\nThe parameter double Angle is set as the Arm hold angle and is then set as the PID target for the arm.\r\n Look at all of the arm code from 201's 2024 robot here.","arm-commands#Arm Commands":"To create a command for the arm, we implement the arm subsystem into the command to use the already created motor, encoder, PID controller, and functions.","example-code-1#Example code:":"public class RotateArmToPosition extends Command {\r\n    /** Creates a new RotateArm. */\r\n    private final Arm c_arm;\r\n    private final DoubleSupplier c_angle;\r\n    private final boolean c_failure;\r\n\r\n    public RotateArmToPosition(Arm arm, DoubleSupplier desiredAngle) {\r\n        c_arm = arm;\r\n        c_angle = desiredAngle;\r\n        addRequirements(c_arm);\r\n\r\n        if(desiredAngle.getAsDouble() < -20) {\r\n            c_failure = true;\r\n        } else {\r\n            c_failure = false;\r\n        }\r\n\r\n        SmartDashboard.putBoolean(\"ARM FAILURE\", c_failure);\r\n        // Use addRequirements() here to declare subsystem dependencies.\r\n    }\r\nThis code creates a command class for RotateArmToPosition and uses the arm subsystem.\nIt also uses a failsafe technique to prevent the arm from breaking. The code uses -20 as the threshold for desiredAngle before c_failure returns true. As long as the desiredAngle stays below -20, the command continues as normal.\r\nFailsafes and limits are based on encoder values, which are uniqe to each robot. Make sure to tune these values to each unique robot!\nThe addRequirements(c_arm) function requires the arm subsystem to end all other commands using it. This can help prevent breaking of the robot because it does not allow two commands to try to use the same subsystem.\r\n Note that c_angle is set to be equal to desiredAngle.","initialize-excecute-and-end#Initialize, Excecute, and End":"When a new Command class is created, you will see initialize, excecute, end, and isFinished functions. The excecute funtion is where what the command will do happens. initialize is for things that need to happen before the command, and end is for things that need to happen before the command finishes. The isFinished function determines when the command ends. It can determine this in itself by returning true, or when the command is interrupted.","example-code-2#Example Code":"@Override\r\n  public void initialize() {\r\n  }\r\n\r\n  @Override\r\n  public void execute() {\r\n  }\r\n\r\n  @Override\r\n  public void end(boolean interrupted) {\r\n  }\r\n\r\n  @Override\r\n  public boolean isFinished() {\r\n    return false;\r\n  }\nThe initialize, excecute, end, and isFinished functions are shown here.","initialize-excecute-and-end-for-rotatearmtoposition#initialize, excecute, and end for RotateArmToPosition":"// Called when the command is initially scheduled.\r\n    @Override\r\n    public void initialize() {\r\n        c_arm.setPIDTarget(c_angle.getAsDouble());\r\n    }\r\n\r\n    // Called every time the scheduler runs while the command is scheduled.\r\n    @Override\r\n    public void execute() {\r\n        if(!c_failure) {\r\n            c_arm.rotateArmToTarget();\r\n        } else {\r\n            c_arm.setFailure(true);\r\n        }\r\n        \r\n    }\r\n\r\n    // Called once the command ends or is interrupted.\r\n    @Override\r\n    public void end(boolean interrupted) {\r\n        c_arm.rotateOrHold(0);\r\n    }\r\n\r\n    // Returns true when the command should end.\r\n    @Override\r\n    public boolean isFinished() {\r\n        return c_failure || c_arm.isArmAtTarget();\r\n    }\n In This example, RotateArmToPosition Command uses all of the functions to complete its' purpose, but not all commands will have to. \nIn initialize, the arm's PID target is set to c_angle.\nThe excecute function checks if faliure mode is true. If it is false, the rotateArmToTarget function is run which uses the arm PID to move it to the previously stated setpoint. If true, c_arm.setFailure is set to true.\nThe end function sets the power of rotateOrHold to 0, keeping the arm at its setpoint. This is the same function that was detailed further up on this page.\nFinally, the isFinished function ends the command either when faliure mode is true or when the arm reaches its' target.\r\n Notice the use of c_failure as seen in the rotateOrHold() method, used to end the command.","mapping-commands-to-an-xbox-controller#Mapping commands to an Xbox controller":"Now that our example command to move the arm is finished, we can move to RobotContainer to use the command on a robot. RobotContainer is where button bindings will be created, as well as adding autonomous paths. If all we wanted to do is move our arm, we could do it like this:\nimport edu.wpi.first.wpilibj2.command.button.CommandXboxController;\r\nimport edu.wpi.first.wpilibj2.command.button.Trigger;\r\nimport frc.robot.commands.arm.RotateArmToPosition;\r\nimport frc.robot.subsystems.arm.Arm;\r\n\r\npublic class RobotContainer {\r\n\r\n  private final Arm arm;\r\n   public final CommandXboxController operatorController;\r\n}\r\n\r\npublic RobotContainer {\r\n     arm = new Arm();\r\n   operatorController = new CommandXboxController(2);\r\n\r\n}\r\n\r\npublic void configureOperatorController{\r\n  operatorController.x(){\r\n    .onTrue(\r\n      new RotateArmToPosition(arm, () -> 30)\r\n    )\r\n    \r\n  }\r\n  \r\n\r\n}\nFirst, we imported the arm subsystem, RotateArmToPosition command, and Xbox controller libraries so they could be used in RobotContainer.\nConfiguring the command to X on the operatorController was very simple, all that had to be done was pass in the arm subsystem and desired angle. In this case, the desired angle was 30.\nThe () -> symbol is called a lambda function. it is used to create functions without a specific name. () defines the parameters the function takes. Because they are empty, the function doesn't take arguments. the -> is used to seperate perameters from the function body.\nSimilar to a motor that needs an ID, an Xbox controller needs a port number. In this case, we set the port number to two. The port of the Xbox controller can be manipulated in the DriverStation.\r\nUsually, a robot will be controlled by two controllers, an operator controller and a driver controller. The driver controller will usually be used for driving and functions that should be done while on the move. The operator controller is for operating all of the other subsystems. Make sure to work with the Drive team when binding buttons. The most important thing is that they are comfortable with the button bindings!","conclusion#Conclusion":"Now, our example arm code is all done. We created an arm subsystem to create a motor, encoder, PID controller, and functions for the arm. We made a RotateArmToPosition using the arm subsystem to move the arm to an angle. Then we bound the command to a button in RobotContainer and set the arm setpoint to 30 degrees. this is just one example of what can be done with an arm. Many more things are possible, so always make sure to explore your options when programming anything. Happy coding!\nAll example code was sampled from the FEDS 201 Stewie Repository.\n Look at all of the arm code from 201's 2024 robot Here"}},"/Programming/Subsystems/Intake/IRsensor":{"title":"Irsensor","data":{"":"Intake IR Sensor - FEDS201","intake-ir-sensor#Intake IR Sensor":"Another common component of an intake is a sensor used to detect when game pieces enter it. Example code can be seen below:","example-code#Example Code":"package frc.robot.subsystems.intake;\r\n\r\nimport edu.wpi.first.wpilibj.DigitalInput;\r\nimport frc.robot.constants.DIOConstants.*;\r\n\r\npublic class IntakeIRSensor extends SubsystemBase {\r\n  /** Creates a new BreakBeamSensor. */\r\n  private final DigitalInput receiverIntake;\r\n\r\n  public IntakeIRSensor() {\r\n    receiverIntake = new DigitalInput(SensorConstants.intakeBreakBeamReceiverPort);\r\n\r\n    setupShuffleboard();\r\n  }\r\n\r\n  @Override\r\n  public void setupShuffleboard() {\r\n    tab.add(\"BreakBeam\", receiverIntake);\r\n  }\r\n\r\n  @Override\r\n  public void periodic() {\r\n  }\r\n\r\n  public boolean getBeamBroken() {\r\n    return beamBrokenIntake.get();\r\n  }\r\n\r\n}","code-explanation#Code Explanation":"This class represents a subsystem for an infrared (IR) break-beam sensor in the robot's intake system. It monitors whether the beam is broken,\r\nwhich helps detect if the intake has successfully captured a game piece.","constructor-intakeirsensor#Constructor (IntakeIRSensor):":"Initializes the break-beam sensor (receiverIntake) using the port specified in SensorConstants.intakeBreakBeamReceiverPort.\nCalls setupShuffleboard() to display the sensor status on the Shuffleboard.\nA typical IR break beam sensor is made of 2 parts: The Transmitter and the Reciever. The Transmitter does not have to be coded, as it only needs to be powered by the robot. On the other hand, the Reciever does need to be coded, as it is here.","key-methods#Key Methods:":"getBeamBroken():\nPurpose: This method checks whether the IR sensor's beam is broken (i.e., if an object has interrupted the beam).\nImplementation: It reads the sensor state through beamBrokenIntake.get(). If the beam is broken (an object is detected), it returns true; otherwise, it returns false.\nsetupShuffleboard():\nPurpose: This method sets up the sensor's data to be displayed on the robot's Shuffleboard.\nImplementation: It adds the IR sensor (receiverIntake) to the Shuffleboard under the label \"BreakBeam\", allowing anyone to see the sensor's status in real-time.","conclusion#Conclusion":"The above example code details a basic implementation of an IR break-beam sensor for our purpose of programming an intake subsystem. This part of the intake does not require a command, as we are simply reading the value from the sensor and nothing more."}},"/Programming/Subsystems/Intake/IntakeOverview":{"title":"Intake Overview","data":{"":"Intake Overview - FEDS201\nIntakes are in some way a part of every robot, which means there are many ways to go about designing and programming them. All intakes fall into two main categories: Over the bumper\r\nand under the bumper.","under-the-bumper-intakes#Under the Bumper Intakes":"when the size and shape of the game piece allows, Under the bumper intakes can be useful in several scenarios, especially when a robot is taking heavy hits from other things on the field.","over-the-bumper-intakes#Over the Bumper Intakes":"Over the bumper intakes are a good solution for many game challenges. They can add an extra bit of reach for a robot, or guide game pieces into a robots' frame.\nAn Over the bumper intake can be seen on Team 201's 2024 robot, Spyder.","programming-an-over-the-bumper-intake#Programming an over the bumper intake":"An over-the-bumper intake can use a variety of hardware, though it is typical for one to have:\nA wrist turning motor\nAn intake turning motor\nAn encoder to track wrist movement\nA sensor to detect when a game piece enters the intake\nThe next pages will detail how each of these hardwares can be programmed together to create a robust Intake subsystem."}},"/Programming/Subsystems/Intake/Intakewheels":{"title":"Intakewheels","data":{"":"Intake Wheels - FEDS201","intake-wheels#Intake wheels":"An IntakeWheels class completes our Intake subsystem in addition to the Wrist class and the IntakeIRSensor. Example code to program the intake wheels can be found below:","example-code#Example Code":"package frc.robot.subsystems.intake;\r\n\r\nimport com.revrobotics.CANSparkMax;\r\nimport com.revrobotics.CANSparkLowLevel.MotorType;\r\nimport frc.robot.constants.CANConstants;\r\n\r\n\r\npublic class IntakeWheels extends SubsystemBase {\r\n  private final CANSparkMax intakeWheel;\r\n\r\n  /** Creates a new intake. */\r\n  public IntakeWheels() {\r\n    intakeWheel = new CANSparkMax(CANConstants.Intake.kIntakeWheels, MotorType.kBrushless);\r\n  }\r\n\r\n  @Override\r\n  public void periodic() {\r\n    // This method will be called once per scheduler run\r\n    SmartDashboard.putNumber(\"intake bus voltage\", intakeWheel.getBusVoltage());\r\n    SmartDashboard.putNumber(\"intake motor temperature\", intakeWheel.getMotorTemperature());\r\n  }\r\n\r\n  // SETTERS\r\n  public void setIntakeWheels(double voltage) {\r\n    intakeWheel.set(voltage);\r\n  }\r\n}","about-the-code#About the code":"This is another more simple part of our intake subsystem.\nIn the Constructor, we initialize a CANSparkMax motor controller.\nIn the periodic() function, we log the intke bus voltage and the intake motor temperature. While these are not necessarily important to this code, these values can be useful when monitoring the use of the intake wheels and when trying to avoid overheating.\nFinally, the setIntakeWheels() method provides us a way to set the speed of the intake wheels.","runintakewheels-command#RunIntakeWheels command":"This simple method is then used to create a RunIntakeWheels command:\npackage frc.robot.commands.intake;\r\n\r\nimport java.util.function.DoubleSupplier;\r\nimport edu.wpi.first.wpilibj2.command.Command;\r\nimport frc.robot.subsystems.intake.IntakeWheels;\r\n\r\npublic class RunIntakeWheels extends Command {\r\n  /** Creates a new IntakeIn. */\r\n  private final IntakeWheels c_intake;\r\n  private final DoubleSupplier c_intakeVoltage;\r\n\r\n  public RunIntakeWheels(IntakeWheels intake, DoubleSupplier intakeVoltage) {\r\n    c_intake = intake;\r\n    c_intakeVoltage = intakeVoltage;\r\n\r\n    addRequirements(c_intake);\r\n      // use addRequirements( here to declare subsystem dependency\r\n  }\r\n\r\n  // Called when the command is initially scheduled.\r\n  @Override\r\n  public void initialize() {}\r\n\r\n  // Called every time the scheduler runs while the command is scheduled.\r\n  @Override\r\n  public void execute() {\r\n    c_intake.setIntakeWheels(c_intakeVoltage.getAsDouble());\r\n    \r\n  }\r\n\r\n  // Called once the command ends or is interrupted.\r\n  @Override\r\n  public void end(boolean interrupted) {\r\n    c_intake.setIntakeWheels(0);\r\n  }\r\n\r\n  // Returns true when the command should end.\r\n  @Override\r\n  public boolean isFinished() {\r\n    return false;\r\n  }\r\n}\nA DoubleSupplier (Seen above) is a functional interface that allows you to generate and return a double value. It's commonly used when you need to supply\r\ndouble values in a flexible, functional style, such as the above code.","summary#Summary":"In this code, Commands and Subsystem classes were created for each of the 3 parts of an example intake. When using the commands and values together, we can program an intake to:\nDeploy to a \"Floor position\"\nRun intake wheels to pick up a game piece\nDetect the game piece with an IR sensor, causing the wrist to return into the robot's frame\nSpit out the game piece by reversing the direction of the intake wheels (Into a scoring zone, stow, etc.)\nThis could look something like:\npackage frc.robot.commands.compound;\r\n\r\nimport edu.wpi.first.wpilibj2.command.ParallelDeadlineGroup;\r\nimport edu.wpi.first.wpilibj2.command.SequentialCommandGroup;\r\nimport frc.robot.commands.intake.RunIntakeWheels;\r\nimport frc.robot.commands.intake.RotateWristToPosition;\r\nimport frc.robot.constants.IntakeConstants;\r\nimport frc.robot.subsystems.intake.IntakeIRSensor;\r\nimport frc.robot.subsystems.intake.IntakeWheels;\r\nimport frc.robot.subsystems.intake.Wrist;\r\n\r\npublic class DeployIntake extends SequentialCommandGroup {\r\n    public DeployIntake(Wrist wrist, IntakeWheels intakeWheels, IntakeIRSensor breakBeamSensorIntake, CommandXboxController driver) {\r\n        addCommands(\r\n            new ParallelDeadlineGroup(\r\n                new RotateWristToPosition(wrist, 300),\r\n              new RunIntakeWheels(intakeWheels, () -> -1)\r\n            .until(breakBeamSensorIntake::getBeamBroken)),\r\n\r\n            new ParallelDeadlineGroup(\r\n                new RotateWristToPosition(wrist, 100),\r\n                new RunIntakeWheels(intakeWheels, () -> 0)));\r\n    }\r\n}\nChallenge: Now, go back into the previous explanations to find these commands, and try and understand what these parameters will cause the subsystem to do!","conclusion#Conclusion":"Intakes are versatile and customizable subsystems that can be used to accomplish a plethora of tasks and objectives. Hopefully, the example code in this section assists you in programming your own intake subsystem. Happy coding!"}},"/Programming/Subsystems/Intake/Wrist":{"title":"Wrist","data":{"":"Wrist - FEDS201\nThe first part of our intake subsystem is out wrist. Using the wrist motor and encoder, the end goal of this part is to be able to rotate the intake to angle setpoints using the wrist motor with feedback from the encoder. Below is example code for a basic wrist:","example-code#Example Code":"package frc.robot.subsystems.intake;\r\n\r\nimport com.revrobotics.CANSparkMax;\r\nimport com.revrobotics.CANSparkLowLevel.MotorType;\r\n\r\nimport edu.wpi.first.math.controller.PIDController;\r\nimport edu.wpi.first.wpilibj.DutyCycleEncoder;\r\nimport edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;\r\nimport frc.robot.constants.CANConstants;\r\nimport frc.robot.constants.DIOConstants;\r\nimport frc.robot.constants.IntakeConstants;\r\n\r\npublic class Wrist extends SubsystemBase {\r\n  private final CANSparkMax wristRotation;\r\n  private final DutyCycleEncoder wristRotationEncoder;\r\n\r\n  private final PIDController pid = IntakeConstants.WristPID.GetWristPID();\r\n  private static double encoderAngle;\r\n  private static double rawEncoderValue;\r\n \r\n  /** Creates a new intake. */\r\n  public Wrist() {\r\n    wristRotation = new CANSparkMax(CANConstants.Intake.kIntakeWrist, MotorType.kBrushless);\r\n    wristRotationEncoder = new DutyCycleEncoder(DIOConstants.Intake.kIntakeRotateEncoder);\r\n\r\n    wristRotationEncoder.setPositionOffset(0);\r\n  }\r\n\r\n  @Override\r\n  public void periodic() {\r\n    wristRotationEncoder.setPositionOffset(0);\r\n\r\n    /*Encoder returns 0 when disconnected\r\n    Prevents wrist from suddenly jolting to a \"zero\" position*/\r\n     if(!wristRotationEncoder.isConnected()) {\r\n      wristRotation.setVoltage(0);\r\n    }\r\n\r\n    // This method will be called once per scheduler run\r\n    writePeriodicOutputs();\r\n  }\r\n\r\n  @Override\r\n  public void writePeriodicOutputs() {\r\n    readWristEncoder();\r\n  }\r\n\r\n  public void readWristEncoder(){\r\n    rawEncoderValue = wristRotationEncoder.get();\r\n    encoderAngle = rawEncoderValue * 360;\r\n  }\r\n\r\n  // GETTERS\r\n  public static double getEncoderValue() {\r\n    return rawEncoderValue;\r\n  }\r\n\r\n  public double getTarget() {\r\n    return pid.getSetpoint();\r\n  }\r\n\r\n public boolean pidAtSetpoint() {\r\n    return pid.atSetpoint();\r\n  }\r\n public static double getEncoderAngle(){\r\n    return encoderAngle;\r\n }\r\n\r\n\r\n  // SETTERS\r\n  public void setWristVoltage(double voltage) {\r\n    wristRotation.set(voltage); \r\n  }\r\n\r\n    public void setPIDTarget(double target) {\r\n    pid.setSetpoint(target);\r\n  }\r\n\r\n    public void rotateWristPID() {\r\n    double output = pid.calculate(getEncoderAngle());\r\n    setWristVoltage(output);\r\n  }\r\n\r\n\r\n}","code-explanation#Code Explanation":"let's now break down each part of this code and better understand what its doing:","imports#Imports:":"com.revrobotics.CANSparkMax: A class from the REV Robotics library (vendordep) that provides control over a brushless motor.\nedu.wpi.first.math.controller.PIDController: Implements a PID controller, as seen previously on the Arm page.\nedu.wpi.first.wpilibj.DutyCycleEncoder: A class that reads the position of an encoder. In this case, it's used to monitor the wrist's angle of rotation.\nfrc.robot.constants.CANConstants, DIOConstants, IntakeConstants: These constants hold values for motor IDs, encoder ports, and PID controller settings (defined elsewhere in the code).","class-definition#Class Definition:":"public class Wrist extends SubsystemBase {\nThe Wrist class extends SubsystemBase, meaning it is part of the robot's subsystem structure. A subsystem is a component of the robot (such as the intake, arm, or wheels) that\r\nis responsible for a specific function.","instance-variables#Instance Variables:":"private final CANSparkMax wristRotation;\r\nprivate final DutyCycleEncoder wristRotationEncoder;\r\nprivate final PIDController pid = IntakeConstants.WristPID.GetWristPID();\r\nprivate static double encoderAngle;\r\nprivate static double rawEncoderValue;\nwristRotation: A CANSparkMax object that controls the wrist motor using a brushless motor. This is the motor that rotates the wrist.\nwristRotationEncoder: A DutyCycleEncoder that reads the wrist's rotational position to track the angle of the wrist.\npid: A PIDController used to control the wrist's rotation.\nencoderAngle: A static variable to store the wrist's angle (calculated from the encoder's value).\nrawEncoderValue: A static variable to store the raw value from the encoder, which will be used to calculate the angle.\nUnlike the rest of this documentation, Wrist uses CANSparkMax motors instead of talonFX. This is another brushless motor used in FRC, and uses different libraries that are exemplified here.","constructor#Constructor:":"public Wrist() {\r\n  wristRotation = new CANSparkMax(CANConstants.Intake.kIntakeWrist, MotorType.kBrushless);\r\n  wristRotationEncoder = new DutyCycleEncoder(DIOConstants.Intake.kIntakeRotateEncoder);\r\n  wristRotationEncoder.setPositionOffset(0);\r\n}\nwristRotation: Initializes the wrist motor using the CAN ID defined in CANConstants.Intake.kIntakeWrist and sets it to a brushless motor type.\nwristRotationEncoder: Initializes the encoder using the DIO port defined in DIOConstants.Intake.kIntakeRotateEncoder.\nsetPositionOffset(0): Resets the encoder's position to 0, ensuring that the encoder starts at a consistent reference position.","periodic-method#periodic() Method:":"@Override\r\npublic void periodic() {\r\n  wristRotationEncoder.setPositionOffset(0);\r\n  if (!wristRotationEncoder.isConnected()) {\r\n    wristRotation.setVoltage(0);\r\n  }\r\n  writePeriodicOutputs();\r\n}\nperiodic(): This method is called periodically by the robot framework (every 20 milliseconds).\nwristRotationEncoder.setPositionOffset(0): Resets the encoder position offset to zero during every periodic call.\nif (!wristRotationEncoder.isConnected()): Checks if the encoder is connected. If not, it sets the wrist motor voltage to 0 to avoid erratic behavior due to a disconnected\r\nencoder.","writeperiodicoutputs-method#writePeriodicOutputs() Method:":"@Override\r\npublic void writePeriodicOutputs() {\r\n  readWristEncoder();\r\n}\nThis method calls readWristEncoder().","readwristencoder-method#readWristEncoder() Method:":"public void readWristEncoder(){\r\n  rawEncoderValue = wristRotationEncoder.get();\r\n  encoderAngle = rawEncoderValue * 360;\r\n}\nreadWristEncoder(): This method reads the raw encoder value from wristRotationEncoder and calculates the wrist's angle.\nrawEncoderValue = wristRotationEncoder.get(): Gets the raw encoder value (Where 360 degrees of movement is equal to 1), representing the position of the wrist in its\r\nrotation.\nencoderAngle = rawEncoderValue * 360: Converts the raw encoder value to an angle in degrees (since the encoder value represents a full 360° rotation).","getters#Getters:":"public static double getEncoderValue() {\r\n  return rawEncoderValue;\r\n}\r\n\r\npublic double getTarget() {\r\n  return pid.getSetpoint();\r\n}\r\n\r\npublic boolean pidAtSetpoint() {\r\n  return pid.atSetpoint();\r\n}\r\n\r\npublic static double getEncoderAngle() {\r\n  return encoderAngle;\r\n}\ngetEncoderValue(): Returns the raw encoder value, which is a normalized value representing the wrist’s position.\ngetTarget(): Returns the target setpoint (the desired wrist angle) that the PID controller is trying to reach.\npidAtSetpoint(): Checks if the wrist is at the desired position (i.e., if the PID controller has reached the target setpoint).\ngetEncoderAngle(): Returns the calculated wrist angle in degrees.","setters#Setters:":"public void setWristVoltage(double voltage) {\r\n  wristRotation.set(voltage); \r\n}\r\n\r\npublic void setPIDTarget(double target) {\r\n  pid.setSetpoint(target);\r\n}\r\n\r\npublic void rotateWristPID() {\r\n  double output = pid.calculate(getEncoderAngle());\r\n  setWristVoltage(output);\r\n}\nsetWristVoltage(double voltage): Sets the wrist motor to a specific voltage. This controls the wrist's movement by providing power to the motor.\nsetPIDTarget(double target): Sets the target position (angle) for the wrist. The PID controller will attempt to move the wrist to this target.\nrotateWristPID(): Calculates the output of the PID controller based on the current wrist angle and the target setpoint. The motor's voltage is adjusted accordingly to move the wrist toward the target position.","rotatewristtoposition-command#RotateWristToPosition Command":"In the above code, several methods have been created to allow the wrist to move to a given position. The below code is an example command created from these methods to allow for the\r\nwrist to be moved to a certain position.\npackage frc.robot.commands.intake;\r\n\r\nimport edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;\r\nimport edu.wpi.first.wpilibj2.command.Command;\r\nimport frc.robot.subsystems.intake.Wrist;\r\n\r\npublic class RotateWristToPosition extends Command {\r\n  \r\n  private final Wrist c_intake;\r\n  private final double c_target;\r\n  private final boolean c_failure;\r\n\r\n  public RotateWristToPosition(Wrist intake, double target) {\r\n    c_intake = intake;\r\n    c_target = target;\r\n    addRequirements(c_intake);\r\n\r\n    if(target < -20) {\r\n      c_failure = true;\r\n    } else {\r\n      c_failure = false;\r\n    }\r\n    SmartDashboard.putBoolean(\"WRIST FAILURE\", c_failure);\r\n    // Use addRequirements() here to declare subsystem dependencies.\r\n\r\n  }\r\n\r\n  // Called when the command is initially scheduled.\r\n  @Override\r\n  public void initialize() {\r\n    c_intake.setPIDTarget(c_target);\r\n  }\r\n\r\n  // Called every time the scheduler runs while the command is scheduled.\r\n  @Override\r\n  public void execute() {\r\n    if(!c_failure) {\r\n      c_intake.rotateWristPID();\r\n    } else {\r\n      c_intake.setWristVoltage(0.0);\r\n    }\r\n  }\r\n\r\n  // Called once the command ends or is interrupted.\r\n  @Override\r\n  public void end(boolean interrupted) {\r\n    c_intake.setWristVoltage(0.0);\r\n  }\r\n\r\n  // Returns true when the command should end.\r\n  @Override\r\n  public boolean isFinished() {\r\n    return c_failure || c_intake.pidAtSetpoint();\r\n    // return false;\r\n  }\r\n}","code-explanation-1#Code explanation":"","instance-variables-1#Instance Variables:":"c_intake: A reference to the Wrist subsystem. This allows the command to control the wrist and interact with the motor.\nc_target: The target position (in degrees or encoder units) the wrist should rotate to.\nc_failure: A boolean flag that determines whether a failure condition is triggered. If the target is invalid (e.g., too small), movement is halted.","constructor-1#Constructor:":"c_intake = intake: Initializes the reference to the Wrist subsystem.\nc_target = target: Sets the target position for the wrist.\naddRequirements(c_intake): Registers the Wrist subsystem as a requirement, ensuring no other command can control the wrist simultaneously.\nFailure Condition: If the target is less than -20, it sets the c_failure flag to true. This condition represents an out-of-range or invalid position.\nSmartDashboard.putBoolean(\"WRIST FAILURE\", c_failure): Displays the failure condition on the SmartDashboard for real-time monitoring.\nNote that these failure thresholds are for the example only. Failure thresholds are unique to every robot.\nMoving past the Constructor, lets break down the initialize, excecute, end, and isFinished functions\nFor a more in-depth dive into these methods, see the Arm page.","initialize-method#initialize() Method:":"c_intake.setPIDTarget(c_target): Sets the target position for the wrist in the PID controller.","execute-method#execute() Method:":"If no failure (c_failure == false):\nc_intake.rotateWristPID(): This method (As seen in the Wrist class) uses the PID controller to adjust the wrist motor’s voltage and rotate the wrist towards the target position.\n**If a failure is detected:\nc_intake.setWristVoltage(0.0): This stops the wrist motor by setting the motor's voltage to 0, preventing any movement.","end-method#end() Method:":"c_intake.setWristVoltage(0.0): Ensures that the wrist motor stops moving when the command ends.","isfinished-method#isFinished() Method:":"The command ends if:\nFailure condition (c_failure == true) is triggered.\nPID controller reaches the setpoint (i.e., the wrist reaches the target position). This is checked by c_intake.pidAtSetpoint().","summary#Summary":"In the above example code, we created A wrist class and command, both of which will be used later as a part of the intake subsystem."}},"/Programming/Subsystems/PID_control":{"title":"PID","data":{"":"PID is a method of moving a mechanism to a precise point. It works using a Proportional, integral, and derivatie term. Let's dive deeper into each of these terms and what they do.","the-kp-term#The kP term":"the P term, or the Proportional term, is the most commonly used term for PID. To explain how it works, let's use an example mechanism that has to move 50 degrees. Using an encoder value on the mechanism, we know that the mechanism's current position is at 0 degrees. We also know the mechanism needs to get to the 50 degree position. This distance is called the error. So, the mechanism has an error of 50 degrees.\r\nThe proportional term is a constant, and it works by multiplying itself by the error to get the motor output. The equation is:\r\nMotorOutput = kP * Error\r\nThe P term is quite straightforward. as the motor moves the mechanism closer to its 50 degree mark, the error becomes smaller, and the motor output will then slow as the mechanism gets closer to the goalpoint. Here is a graph with what different PID values may do to a mechanism in relations to the setpoint:\r\n\r\nIt's important to note that not all mechanisms will have the same PID values. These values depend on weight, friction and other factors that are unique to each mechanism. ALWAYS start with a small value and work your way up until the mechanism moves to the desired point.","tuning-the-kp-term#Tuning the kP term":"As said before, it is important to start with a small kP term. Having one that is too large can lead to extremely high speeds and oscilation that may break a mechanism. Let's go back to our mechanism example. at first, we decide to test it with a kP value of 0.05. After running it, we get a result that looks similar to the undershoot in the graph above. So, we decide to increase the kP value to 0.1, resulting in a graph that looks similar to the overshot. So, after decreasing kP to 0.075, our result is almost to perfection.\r\nThis is just an example of how kP tuning could go, usually, kP tuning will be a much more sophisticated process than this, but the main thing to take away is to Always Start Small!","more-coming-soon#More Coming Soon":""}},"/Programming/Subsystems/Shooter":{"title":"Shooter","data":{"":"Shooter - FEDS201","what-does-a-shooter-do#What Does a Shooter Do?":"A shooter is a great solution when game pieces have to be scored into a high goal. A shooter can typically be made with just one or two motors to spin a set of top and bottom / left and right wheels.","code-example#Code Example":"private final TalonFX shooterTopMain; // Falcon\r\n  private final TalonFX shooterBottomFollower; // Falcon\r\n\r\n  private final MotionMagicVelocityVoltage motionMagic = new MotionMagicVelocityVoltage(0);\r\n\r\n    public ShooterWheels() {\r\n  \r\n    shooterTopMain = new TalonFX(CANConstants.Shooter.kShooterTop);\r\n    shooterBottomFollower = new TalonFX(CANConstants.Shooter.kShooterBottom);\r\n    shooterTopMain.getConfigurator().apply(ShooterConstants.GetWheelsConfiguration());\r\n    shooterBottomFollower.getConfigurator().apply(ShooterConstants.GetWheelsConfiguration());\r\n    }\r\n\r\n    public void setShootVelocityMotionMagic(double velocityTop, double velocityBottom) {\r\n    motionMagic.Slot = 0;\r\n    shooterTopMain.setControl(motionMagic.withVelocity(velocityTop));\r\n    shooterBottomFollower.setControl(motionMagic.withVelocity(velocityBottom));\r\n  }\nAs seen previously in the Arm subsystem, TalonFX motors are instantiated, the motor that spins the top shooter wheels\r\nand the motor that spins the bottom shooter wheels.\nThe lines below that applies a talonFX motor configuration. The method being called can be seen below:\n public static TalonFXConfiguration GetWheelsConfiguration() {\r\n        TalonFXConfiguration configs = new TalonFXConfiguration();\r\n\r\n         configs.Slot0.kP = 0.11; // An error of 1 rotation per second results in 0.11V output\r\n         configs.Slot0.kI = 0.5;  // An accumulated error of 1 rotation per second increases output by 0.5V every second\r\n         configs.Slot0.kD = 0.0001; // A change of 1 rotation per second squared results in 0.0001 volts output\r\n        /*\r\n         * Voltage-based velocity requires a feed forward to account for the back-emf of\r\n         * the motor\r\n         */\r\n        configs.Slot0.kV = 0.12; // Falcon 500 is a 500kV motor, 500rpm per V = 8.333 rps per V, 1/8.33 = 0.12\r\n                                 // volts / Rotation per second\r\n\r\n        configs.MotionMagic.MotionMagicCruiseVelocity = 80;\r\n        configs.MotionMagic.MotionMagicAcceleration = 160;\r\n        configs.MotionMagic.MotionMagicJerk = 1600;\r\n\r\n        // Peak output of 8 volts\r\n        configs.Voltage.PeakForwardVoltage = 0.9 * 12;\r\n        configs.Voltage.PeakReverseVoltage = -0.9 * 12;\r\n\r\n        configs.TorqueCurrent.PeakForwardTorqueCurrent = 40;\r\n        configs.TorqueCurrent.PeakReverseTorqueCurrent = -40;\r\n\r\n        configs.MotorOutput.NeutralMode = NeutralModeValue.Coast;\r\n\r\n        return configs;\r\n    }\nWhile this looks like a lot, it becomes much more straightforward after each part is explained.","talonfxconfiguration#TalonFXConfiguration":"Think of this like a \"container\" for the settings of the motor controller. Inside, there are a few main categories of configuration.\r\nSlot0 Configs, Motion Magic Settings, Voltage Limits, Current Limits, and Neutral Mode.","code-explanation#Code Explanation":"","slot-0-pidf-configuration#Slot 0 (PIDF Configuration)":"configs.Slot0.kP = 0.11; // An error of 1 rotation per second results in 0.11V output\r\n    configs.Slot0.kI = 0.5;  // An accumulated error of 1 rotation per second increases output by 0.5V every second\r\n    configs.Slot0.kD = 0.0001; // A change of 1 rotation per second squared results in 0.0001 volts output","what-are-slot-0-configs#What are Slot 0 configs?":"Slot 0 configs holds the PID and control loop parameters for motor configuration.\r\nWhile slot 0 is the default slot for these configurations, they can also be placed in slot 1, 2, and so on.\nSlot0.kP = 0.11;\nThis sets the Proportional gain (kP) for the PID controller in Slot 0. The proportional term determines how much\r\nthe controller output changes in response to the error. In this case, an error of 1 rotation per second would produce a\r\n0.11V output change.\nSlot0.kI = 0.5;\nThis sets the Integral gain (kI), which accumulates over time. The integral term helps eliminate steady-state\r\nerror by adding a portion of the accumulated error to the output. With kI = 0.5, an error of 1 rotation per second\r\nwill increase the output by 0.5V every second, as the error persists.\nSlot0.kD = 0.0001;\nThis sets the Derivative gain (kD), which predicts the future error based on its rate of change.\r\nThe derivative term helps prevent overshooting and smoothens the response. A change of 1 rotation per\r\nsecond squared will produce a 0.0001V output change.","voltage-based-velocity-control-feedforward#Voltage-Based Velocity Control (Feedforward)":"/*\r\n         * Voltage-based velocity requires a feed forward to account for the back-emf of\r\n         * the motor\r\n         */\r\n    configs.Slot0.kV = 0.12; // Falcon 500 is a 500kV motor, 500rpm per V = 8.333 rps per V, 1/8.33 = 0.12\r\n                             // volts / Rotation per second\nSlot0.kV = 0.12;\nThis sets the voltage feedforward term (kV), which compensates for the back electromotive force (back-EMF) of the motor.\r\nSince the Falcon 500 motor is rated at 500 kV, this means the motor will spin at 500 RPM per volt applied.\r\nIn this case, 0.12V per rotation per second is used to account for the motor's characteristics. The formula comes\r\nfrom converting motor RPM to rotations per second (RPS) and calculating the corresponding feedforward voltage.","motion-magic-settings#Motion Magic Settings":"configs.MotionMagic.MotionMagicCruiseVelocity = 80;\r\n    configs.MotionMagic.MotionMagicAcceleration = 160;\r\n    configs.MotionMagic.MotionMagicJerk = 1600;\nMotion Magic is a control mode designed for smooth movement along a motion profile\r\n(e.g., for moving to a position smoothly).\nMotionMagicCruiseVelocity = 80;\nThis sets the cruise velocity for the motion profile, which is the speed the motor will aim to maintain once\r\nit reaches a steady state in its motion. In this case, it's set to 80 units.\nMotionMagicAcceleration = 160;\nThis sets the acceleration that the motor should use to reach the target velocity. Here, it's set to 160.\nMotionMagicJerk = 1600;\nThis sets the jerk, which is the rate of change of acceleration.\r\nJerk limits how quickly the acceleration can change, preventing sudden, jerky movements. It's set to 1600.\nLearn more about Motion Magic in CTRE's documentation.","voltage-limits#Voltage Limits":"configs.Voltage.PeakForwardVoltage = 0.9 * 12;\r\n    configs.Voltage.PeakReverseVoltage = -0.9 * 12;\nPeakForwardVoltage = 0.9 * 12;\nThis limits the maximum forward voltage output to 90% of 12V, or 10.8V.\nPeakReverseVoltage = -0.9 * 12;\nMaximum reverse voltage is set to the opposite.","current-limits-torque#Current Limits (Torque)":"configs.TorqueCurrent.PeakForwardTorqueCurrent = 40;\r\n    configs.TorqueCurrent.PeakReverseTorqueCurrent = -40;\nPeakForwardTorqueCurrent = 40;\nThis sets the maximum forward current allowed to be sent to the motor for torque production.\nIt limits the current to 40A in the forward direction.\nPeakReverseTorqueCurrent = -40;\nmaximum reverse current is set to the opposite.","neutral-mode-motor-brakecoast-mode#Neutral Mode (Motor Brake/Coast Mode)":"configs.MotorOutput.NeutralMode = NeutralModeValue.Coast;\nNeutralMode = NeutralModeValue.Coast;\nThis sets the neutral mode of the motor to Coast. In Coast mode, when no power is applied,\r\nthe motor will freely rotate and slow down gradually. If set to Brake mode, the motor would resist movement and apply\r\nbraking to stop the motor more quickly.\nSee an application of Brake mode on the Arm subsystem page.","return-the-configuration#Return the Configuration":"return configs;\nFinally, the method returns the configured TalonFXConfiguration object. This object contains all the settings\r\nspecified for the motor.","setshootvelocitymotionmagic-method#setShootVelocityMotionMagic() Method":"Now, the Shooter motors are configured In order to run the wheels, the setShootVelocityMotionMagic() method was created, as seen below:\npublic void setShootVelocityMotionMagic(double velocityTop, double velocityBottom) {\r\n    motionMagic.Slot = 0;\r\n    shooterTopMain.setControl(motionMagic.withVelocity(velocityTop));\r\n    shooterBottomFollower.setControl(motionMagic.withVelocity(velocityBottom));\r\n  }","code-explanation-1#Code explanation":"motionMagic.Slot = 0;\nFirst, the code above sets the slot's gains that the motionMagic control uses. Because we have configured the talonFX motors to slot0, that is also the slot that\r\nwe use here.\nshooterTopMain.setControl(motionMagic.withVelocity(velocityTop));\r\n    shooterBottomFollower.setControl(motionMagic.withVelocity(velocityBottom));\nLastly, this code applies power to the motor using the setControl() method set to motion Magic using the velocity top and velocity bottom parameters.\nIt is important to know that each TalonFX Configuration has its own unique slot 0 values. This means that when the motion magic\r\ncontrol set to slot 0 is set as the control of the two motors, each motor's configured slot 0 gains are used for the motion magic controller. In this case, those values are\r\nthe same for both motors, but in other applications, those values may be different."}},"/Programming/Subsystems/SubsystemOverview":{"title":"Subsystem Overview","data":{"":"Subsystem Overview - FEDS201","what-is-a-subsystem#What is a Subsystem?":"An FRC robot is made from multiple Subsystems, or parts of a robot that each perform a task separately and while working together.\nFEDS201 has created a Custom Framework, its mildly different from normal WpiLib and FRC Setup","how-do-we-program-subsystems#How do we program subsystems?":"We use Java object-oriented programming to program our robot. We create subsystems using a class and give it functions using commands.\n Learn more about Object-oriented programming in the OOP Section.\nCAD Image of FRC Team 201's 2024 Robot, SPYDER.\nIntake, arm, swerve, and shooter subsystems can be seen.","subsystem--code-examples#Subsystem & Code Examples:":""}},"/Programming/Subsystems/Swerve":{"title":"Drive Base","data":{"":"Drive Base - FEDS201\nOur team predominantly uses CTR's Serve Drive System for our drive base. This system is a robust and reliable system that has been used by many teams in the past.","components#Components":"The drive base consists of the following components:\nMotors: We use Falcon 500 motors for our drive base.\nWheels: We use 6-inch pneumatic wheels for our drive base.\nGearbox: We use a custom gearbox for our drive base.\nEncoders: We use CTRE Mag Encoders for our drive base.\nIn order to use CTRE's Swerve Drive System, you will need to have CTRE's Motors, Encoders, and Pigeon IMU."}},"/Programming/Tools&Setup":{"title":"Tools and Setup","data":{"tools-and-setup#Tools and Setup":"Welcome to the Programming subgroup! This guide is designed to help you get started with the tools and technologies used by our team. Whether you're new to programming or looking to sharpen your skills, this guide has something for everyone. We'll cover the software, hardware, and libraries you need to develop the code that controls the robot.","frameworks-and-libraries#Frameworks and Libraries":"CTRE Phoenix Framework","recommended-reading#Recommended Reading":"Java Programming for FRC\nCTRE Phoenix Framework\nREV Robotics Spark Max\nLimeLight Docs\nPhoton Vision Docs"}},"/Programming/Subsystems/Vision":{"title":"Vision","data":{}},"/Programming/UsingInterijIdea":{"title":"GradleRIO","data":{"":"Resources - FEDS201\nGradleRIO is a powerful Gradle Plugin that allows teams competing in the FIRST\r\nrobotics competition to produce and build their code.GradleRIO works with Java and C++ (and others!), on Windows, Mac and Linux. GradleRIO automatically fetches WPILib, Tools, and Vendor Libraries.For 2019+, GradleRIO is the official build system for the FIRST Robotics Competition! The officially supported IDE is Visual Studio Code (VSCode), using the WPILib Extension.Screensteps is the best place for documentation: https://wpilib.screenstepslive.com/s/currentCS/m/79833Other IDEs like IntelliJ IDEA, Eclipse, Visual Studio, and CLion are also supported, unofficially. You may also use this tool exclusively from the command line, allowing use of any IDE or text editor (like Sublime Text, Atom or Vim).","getting-started---creating-a-new-project#Getting Started - Creating a new project":"","with-vscode-recommended#With VSCode (recommended)":"For getting started with VSCode, please see the screensteps documentation:\r\nhttps://wpilib.screenstepslive.com/s/currentCS/m/79833","without-vscode#Without VSCode":"Follow the installation instructions on screensteps: https://wpilib.screenstepslive.com/s/currentCS/m/79833\r\nNote that the offline installer isn't required, but will save you a ton of time and is highly recommended. You can deselect the option of VSCode if you wish.WPILibUtility Standalone Project Builder\r\nWPILib provides a standalone project builder that provides the same interface as VSCode, without having to use VSCode.If you've used the installer, find and run wpilibutility in C:\\Users\\Public\\frc2019\\utility (windows), or ~/frc2019/utility(mac/linux). Note that mac users will have to extract the .tar.gz file, then run.\r\nAlternatively, download it from the VSCode-WPILib releases, extract it, and run it: https://github.com/wpilibsuite/vscode-wpilib/releasesUse the WPILib Utility whenever you want to create a new project.GradleRIO Example Project\r\nGo to the latest release on GitHub: https://github.com/wpilibsuite/GradleRIO/releases.\r\nDownload the .zip file corresponding to your language and extract it.","adding-vendor-libraries#Adding Vendor Libraries":"","with-vscode#With VSCode":"Open the command palette with CTRL + SHIFT + P, or by clicking the WPILib icon.\r\nOpen WPILib: Manage Vendor Libraries, Install new libraries (online), and paste the vendor-provided JSON url.","without-vscode-1#Without VSCode":"Create a folder vendordeps in your project directory if it doesn't already exist.\r\nDownload the JSON file from the vendor-provided URL, and save it to the vendordeps folder.","commands#Commands":"Windows Users: It is recommended to use Powershell instead of CMD. You can switch to powershell with powershell","general#General":"./gradlew build will build your robot code (and run unit tests if present).\n./gradlew deploy will build and deploy your code.\n./gradlew riolog will display the RoboRIO console output on your computer (run with -Pfakeds if you don't have a driverstation connected).\n./gradlew installRoboRioToolchain will install the C++ Toolchains for your system (required for C++).","tools#Tools":"./gradlew ShuffleBoard will launch Shuffleboard, the 2018 replacement for SmartDashboard.\n./gradlew SmartDashboard will launch Smart Dashboard (note: SmartDashboard is legacy software, use ShuffleBoard instead!).\n./gradlew RobotBuilder will launch Robot Builder, a tool for generating robot projects and source files.\n./gradlew OutlineViewer will launch Outline Viewer, for viewing NetworkTables.\n./gradlew PathWeaver will launch PathWeaver, a tool for generating motion profiles with Pathfinder.\nAt Competition? Connected to the Robot? Run with the --offline flag. e.g. ./gradlew deploy --offline","ide-support#IDE Support":"","vscode#VSCode:":"VSCode is fully supported by GradleRIO for FRC. To use it, use the WPILib VSCode extension. See screensteps for instructions.","intellij-idea#IntelliJ IDEA:":"IntelliJ IDEA support is unofficial in the FRC sense, but is well supported by the Gradle team. CSA Support isn't guaranteed, so make sure you're prepared to fix any issues yourself if you're at an event.To start with, you must apply the idea plugin to build.gradle. In your build.gradle, put the following code in the plugins {} block.\nplugins {\r\n    id 'idea'\r\n}\nYou can generate your project with the following command:\n./gradlew idea will generate IDE files for IntelliJ IDEA (java).\nImport your project with File - Open Project in IntelliJ IDEA.Please see the gradle guide on the idea plugin for help: https://docs.gradle.org/current/userguide/idea_plugin.html","eclipse#Eclipse":"Eclipse support is unofficial in the FRC sense, but is well supported by the Gradle team. CSA Support isn't guaranteed, so make sure you're prepared to fix any issues yourself if you're at an event. Eclipse is only supported for JAVA (not C++)To start with, you must apply the eclipse plugin to build.gradle. In your build.gradle, put the following code in the plugins {} block.\nplugins {\r\n    id 'eclipse'\r\n}\nYou can generate your project with the following command:\n./gradlew eclipse will generate IDE files for Eclipse (java).\nImport your project with File - Import... Existing Projects into Workspace in Eclipse.Please see the gradle guide on the eclipse plugin for help: https://docs.gradle.org/current/userguide/eclipse_plugin.html","visual-studio-2017-community--full-not-vscode#Visual Studio 2017 Community / Full (not VSCode)":"VS2017 support is unofficial in the FRC sense, but is well supported by the Gradle team. CSA Support isn't guaranteed, so make sure you're prepared to fix any issues yourself if you're at an event.To start with, you must apply the visual-studio plugin to build.gradle. In your build.gradle, put the following code in the plugins {} block.\nplugins {\r\n    id 'visual-studio'\r\n}\nFinally, you can generate and open your solution with the following command:\n./gradlew openVisualStudio will generate IDE files for VS2017 (C++) and open Visual Studio.\nPlease see the gradle guide on building native software for help: https://docs.gradle.org/current/userguide/native_software.html#native_binaries:visual_studio","upgrading#Upgrading":"To upgrade your version of GradleRIO, you must first upgrade gradle. Near the bottom of your build.gradle, change the wrapper version to the following, and then run ./gradlew wrapper:\ntask wrapper(type: Wrapper) {\r\n    gradleVersion = '5.0'\r\n}\nNext, replace the version in the plugin line (only change the GradleRIO line):\nplugins {\r\n    // ... other plugins ...\r\n    id \"edu.wpi.first.GradleRIO\" version \"REPLACE ME WITH THE LATEST VERSION\"\r\n}\nThe latest version can be obtained from here: https://plugins.gradle.org/plugin/edu.wpi.first.GradleRIO"}},"/Programming/Vision":{"title":"Vision","data":{"":"Introduction Limelight with OS Framework - FEDS201\nLimelight was designed to make robotic perception as easy and reliable as possible without sacrificing raw performance.\nLimelight is easy enough for complete beginners, and powerful enough for professionals.\nConfigure zero-code computer vision pipelines for color blobs, AprilTags, neural networks, and more using the built-in web interface.\nWrite custom Python SnapScript pipelines with tensorflow, opencv, and more using the built-in web interface or Visual Studio Code.\nThe Limelight hardware integrates a high-bandwidth, ultra-low-latency MIPI-CSI imaging sensor, arm64 computer, power conditioning, and LimelightOS.\nLimelight OS supports REST/HTTP, Websocket, Modbus, and NetworkTables protocols and JSON, Protobuf, and raw output formats.","undefined#Accessing API":"Photon OS provides a NetworkTables API for accessing Limelight data and controlling Limelight settings.\nNetworkTables is a protocol for distributed data storage and retrieval.\nNetworkTables is used by the FIRST Robotics Competition (FRC) and other robotics competitions.\nTo get the Data, you need to use this code\nNetworkTableInstance.getDefault().getTable(\"photonvision\").getEntry(\"<variablename/>\").getDouble(0);\nTo set the Data, you need to use this code\nNetworkTableInstance.getDefault().getTable(\"photonvision\").getEntry(\"<variablename/>\").setDouble(0);\nTo initialize the PhotonVision, you need to use this code\n// Change this to match the name of your camera\r\nPhotonCamera camera = new PhotonCamera(\"photonvision\");\nTo get the result, you need to use this code\nPhotonPipelineResult result = camera.getLatestResult();\nTo Check for Existence of Targets, you need to use this code\n// Check if the pipeline has targets\r\nboolean hasTargets = result.hasTargets();\nTo get the list of targets, you need to use this code\n// Get the list of targets\r\nList<PhotonTrackedTarget> targets = result.getTargets();\nTo get the target, you need to use this code\n// Get the first target\r\nPhotonTrackedTarget target = targets.get(0);\nTo get the target data, you need to use this code\n// Get the target data\r\ndouble yaw = target.getYaw();\r\ndouble pitch = target.getPitch();\r\ndouble area = target.getArea();\r\ndouble skew = target.getSkew();\r\ndouble[] pose = target.getPose();\r\ndouble pixelsX = target.getPixelsX();\r\ndouble pixelsY = target.getPixelsY();\nTo get the latency, you need to use this code\n// Get the pipeline latency\r\ndouble latency = result.getLatencyMillis();\nTo get the raw bytes, you need to use this code\n// Get the raw bytes\r\nbyte[] rawBytes = result.getRawBytes();","undefined#Web Interface":"PhotonVision's web interface allows users to easily configure settings, manage pipelines, and view real-time data.\nIt provides a user-friendly environment for both beginners and professionals to work with computer vision tasks.","undefined#SnapScript":"SnapScript is a Python-like language embedded within PhotonVision.\nIt allows users to create custom pipelines using libraries like TensorFlow and OpenCV.\nThis feature is particularly useful for advanced users who want to tailor the pipelines to their specific needs.","undefined#Compatible with Google Coral":"PhotonVision is compatible with the Google Coral USB Accelerator.\nThis USB device provides hardware acceleration for neural networks, significantly improving the performance of object detection tasks.","undefined#Robot Localization":"PhotonVision enables robot localization using AprilTags.\nThis feature allows the robot to determine its position and orientation in a known environment.\nWhich is crucial for tasks that require precise movement and positioning.","undefined#LimelightOS":"LimelightOS is a custom operating system that is designed to run on the Limelight hardware.\nLimelightOS is based on the Linux kernel.\nLimelightOS is designed to be fast, reliable, and easy to use.","undefined#Basic Targeting Data API":"Key\tType\tDescription\trawBytes\tbyte[]\tA byte-packed string that contains target info from the same timestamp.\tlatencyMillis\tdouble\tThe latency of the pipeline in milliseconds.\thasTarget\tboolean\tWhether the pipeline is detecting targets or not.\ttargetPitch\tdouble\tThe pitch of the target in degrees (positive up).\ttargetYaw\tdouble\tThe yaw of the target in degrees (positive right).\ttargetArea\tdouble\tThe area (percent of bounding box in screen) as a percent (0-100).\ttargetSkew\tdouble\tThe skew of the target in degrees (counter-clockwise positive).\ttargetPose\tdouble[]\tThe pose of the target relative to the robot (x, y, z, qw, qx, qy, qz)\ttargetPixelsX\tdouble\tThe target crosshair location horizontally, in pixels (origin top-right)\ttargetPixelsY\tdouble\tThe target crosshair location vertically, in pixels (origin top-right)","undefined#Advanced Targeting Data API":"Key\tType\tDescription\tbotpose\tdoubleArray\tRobot transform in field-space. Translation (X,Y,Z) in meters Rotation(Roll,Pitch,Yaw) in degrees, total latency (cl+tl), tag count, tag span, average tag distance from camera, average tag area (percentage of image)\tbotpose_wpiblue\tdoubleArray\tRobot transform in field-space (blue driverstation WPILIB origin). Translation (X,Y,Z) in meters Rotation(Roll,Pitch,Yaw) in degrees, total latency (cl+tl), tag count, tag span, average tag distance from camera, average tag area (percentage of image)\tbotpose_wpired\tdoubleArray\tRobot transform in field-space (red driverstation WPILIB origin). Translation (X,Y,Z) in meters, Rotation(Roll,Pitch,Yaw) in degrees, total latency (cl+tl), tag count, tag span, average tag distance from camera, average tag area (percentage of image)\tbotpose_orb\tdoubleArray\tRobot transform in field-space (Megatag2). Translation (X,Y,Z) in meters Rotation(Roll,Pitch,Yaw) in degrees, total latency (cl+tl), tag count, tag span, average tag distance from camera, average tag area (percentage of image)\tbotpose_orb_wpiblue\tdoubleArray\tRobot transform in field-space (Megatag2) (blue driverstation WPILIB origin). Translation (X,Y,Z) in meters Rotation(Roll,Pitch,Yaw) in degrees, total latency (cl+tl), tag count, tag span, average tag distance from camera, average tag area (percentage of image)\tbotpose_orb_wpired\tdoubleArray\tRobot transform in field-space (Megatag2) (red driverstation WPILIB origin). Translation (X,Y,Z) in meters, Rotation(Roll,Pitch,Yaw) in degrees, total latency (cl+tl), tag count, tag span, average tag distance from camera, average tag area (percentage of image)\tcamerapose_targetspace\tdoubleArray\t3D transform of the camera in the coordinate system of the primary in-view AprilTag (array (6)) [tx, ty, tz, pitch, yaw, roll] (meters, degrees)\ttargetpose_cameraspace\tdoubleArray\t3D transform of the primary in-view AprilTag in the coordinate system of the Camera (array (6)) [tx, ty, tz, pitch, yaw, roll] (meters, degrees)\ttargetpose_robotspace\tdoubleArray\t3D transform of the primary in-view AprilTag in the coordinate system of the Robot (array (6)) [tx, ty, tz, pitch, yaw, roll] (meters, degrees)\tbotpose_targetspace\tdoubleArray\t3D transform of the robot in the coordinate system of the primary in-view AprilTag (array (6)) [tx, ty, tz, pitch, yaw, roll] (meters, degrees)\tcamerapose_robotspace\tdoubleArray\t3D transform of the camera in the coordinate system of the robot (array (6))\ttid\tint\tID of the primary in-view AprilTag\tpriorityid\tint (setter)\tSET the required ID for tx/ty targeting. Ignore other targets. Does not affect localization","undefined#Other Utils API":"Key\tType\tDescription\tledMode\tint\tSets the LED Mode (-1: default, 0: off, 1: on, 2: blink)\tinputSaveImgCmd\tboolean\tTriggers saving the current input image to file.\toutputSaveImgCmd\tboolean\tTriggers saving the current output image to file.\tpipelineIndex\tint\tChanges the pipeline index.\tdriverMode\tboolean\tToggles driver mode.","undefined#Libraries":"","undefined#Key Features of PhotonVision":"Ease of Use: Designed to be accessible for both beginners and professionals.\nZero-Code Pipelines: Build pipelines for color blobs, AprilTags, and neural networks through a web interface.\nCustom Scripting: Use SnapScript for advanced tasks and integration with libraries like TensorFlow and OpenCV.\nHardware Compatibility: Integrates with Orange Pi 5/5+ coprocessors and their Neural Processing Units (NPUs) for accelerated performance.\nMultiple Communication Protocols: Supports various communication protocols (REST/HTTP, Websocket, Modbus, NetworkTables) for data exchange with robot controllers.\nData Formats: Outputs data in JSON, Protobuf, and raw formats for flexibility in integration.\nMultiple Cameras: Can handle multiple cameras simultaneously for different vision tasks.","undefined#Additional Details":"","undefined#PhotonOS":"PhotonVision runs on PhotonOS, a custom operating system designed specifically for the PhotonVision hardware.\nPhotonOS is based on the Linux kernel and is optimized for fast and reliable performance in robotics applications.","undefined#PhotonVision Documentation":""}},"/Programming/Workshop/Live":{"title":"Index","data":{}},"/Programming/Workshop/Vscode":{"title":"Index","data":{}},"/Programming":{"title":"Introduction","data":{"":"Intro - FEDS201\nOh no. Oh, no, no, no. What have you done? Somehow, someway, you’ve wandered into the cursed domain of FRC robot programming—the unholy intersection of shattered dreams, endless bugs, and the cold, unfeeling void of Java stack traces. Abandon hope, all ye who enter here, for you are about to embark on a journey so fraught with frustration that even the bravest of souls would quiver at the thought.\nFRC programming isn’t just a skill—it’s a test of your very will to exist. Each keystroke inches you closer to madness, every compile error another dagger in your heart. You’ll spend hours crafting code only to watch in horror as your robot smashes into the wall like a drunken moose, ignoring every logical command you so painstakingly wrote.Why? Because this isn’t just programming. It’s robot programming. That means your code isn’t just running in a tidy little digital sandbox. No, it’s fighting tooth and nail with janky hardware, rebellious motors, and sensors that tell bold-faced lies to your face. Think debugging is hard? Try debugging something that’s screaming across the floor at 15 feet per second while literally on fire.\nImagine training a hyperactive raccoon to juggle chainsaws while blindfolded. That’s about the level of cooperation you can expect from an FRC robot.\nHere’s the thing: this isn’t for the faint of heart. Every inch of progress is earned in blood, sweat, and tears. Every line of working code is a miracle. And yet, the dark truth is that it will break again—probably during your demo. Resilience won’t just be helpful; it will be the only thing standing between you and total despair.Programming an FRC robot is a cruel, unforgiving grind that chews you up, spits you out, and demands you crawl back for more.But hey, don’t let that scare you off. There’s a twisted sort of joy in this, too. The moment when your robot finally executes an autonomous sequence flawlessly after days of struggle will feel like summiting Everest. You’ll cling to that fleeting victory as a testament to your resilience, even as the robot’s next move shatters your confidence all over again.As you work through this guide, remember: failure isn’t just inevitable—it’s practically the point. Embrace the chaos. Learn from it. And when your robot still somehow refuses to cooperate, just remember that the rest of us are suffering right alongside you.So, welcome to the FRC programming team. You didn’t choose this life; it chose you. And now, there’s no turning back.Let’s begin.","quick-navigate#Quick-Navigate":""}},"/Strategy/Tools&Setup":{"title":"Scouting and Strategy Tools and Setup","data":{"season-2024-25#Season 2024-25":"","scouting-app#Scouting App":"This year, we developed a Scouting System from the ground up, consisting of a Web App, a Mobile App, and a Backend Server. The Web App is used by the Scouting Team to input data and monitor all the scouts' progress in real-time. It can also export the data into an Excel spreadsheet. The Mobile App is used by the Scouting Team to input data, and the Backend Server is used to store the data, provide it to the Strategy Team, and simulate real matches.\nThe Simulation depends on Wifi and the Backend Server. Make sure to have a stable connection.","scout-ops-android-setup#Scout-Ops-Android Setup":"The Scout-Ops-Android App is used by the Scouting Team to input data. It is available on the Amazon App Store. To set it up, follow these steps:","#":"","click-on-the-amazon-app-store-icon#Click on the Amazon App Store Icon.":"","-1#":"Click on the Settings Icon."}},"/":{"title":"Welcome to FRC Team 201's Tools and Resources","data":{"":"Welcome to FRC Team 201's Tools and Resources! This guide is a comprehensive collection of tutorials, notes, and resources designed to help you master the tools and technologies used by our team. Whether you're a new member just starting your robotics journey or a seasoned veteran looking to sharpen your skills, this guide has something for everyone. It's a work in progress and will be updated regularly with new content and resources.","subgroups#Subgroups":"To support your learning journey, we have a variety of subgroups that focus on different aspects of robotics. These include:\nThe programming subgroup focuses on developing the software that controls the robot. Members learn programming languages like Java and C++ and work on autonomous routines and driver controls.\nThe electrical subgroup is responsible for designing and wiring the electrical systems on the robot. Members learn about circuits, sensors, and power distribution.\nThe CAD subgroup uses computer-aided design software to create 3D models of the robot. Members learn about mechanical design and create detailed drawings for manufacturing.\nThe mechanical subgroup designs and builds the physical structure of the robot. Members work with tools, materials, and CAD software to create the robot's components.\nThe strategy subgroup analyzes game data and develops game strategies for competitions. Members work on scouting, match analysis, and robot performance optimization.\nThe business subgroup focuses on fundraising, marketing, and team outreach. Members work on sponsorships, social media, and community events.","experiences#Experiences":"We have put together what we did each week in the 2025 season. This is a great way to see what we did and what you can expect to do in the future.\nCheck out our weekly experiences from the 2025 season to see what we did each week and what you can expect in the future.\nCheck out our weekly experiences from the 2024 season to see what we did each week and what you can expect in the future.\nThe Robot Safety System subgroup focuses on developing a safety system for the robot. Members work on implementing safety features and ensuring compliance with competition rules.","what-every-member-should-know#What every member should know":"FEDS Handbook has been created to help you learn about a general overview of what you should know as a member of FEDS. This includes information about the team, the tools we use, and the resources available to you\nThe FEDS Handbook is a comprehensive guide to everything you need to know as a member of FEDS. It covers team structure, tools, resources, and more."}},"/Contribution/MDXStyleSheet":{"title":"MDX Style Sheet","data":{"":"This MDX style sheet provides a quick overview of all the MDX syntax elements. For more information, refer to the MDX documentation.","basic-syntax#Basic Syntax":"","importing-components#Importing Components":"import { MyComponent } from './components/MyComponent'","using-components#Using Components":"<MyComponent />","exporting-values#Exporting Values":"export const myValue = 'Hello, MDX!'","markdown-elements#Markdown Elements":"You can use all standard Markdown elements within MDX files.","heading#Heading":"","h2#H2":"","h3#H3":"","bold#Bold":"bold text","italic#Italic":"italicized text","blockquote#Blockquote":"blockquote","ordered-list#Ordered List":"First item\nSecond item\nThird item","unordered-list#Unordered List":"First item\nSecond item\nThird item","code#Code":"code","horizontal-rule#Horizontal Rule":"","link#Link":"MDX Documentation","image#Image":"","advanced-syntax#Advanced Syntax":"","jsx-in-markdown#JSX in Markdown":"You can embed JSX directly within your Markdown content.\n<div style={{ color: 'red' }}>\r\n  This is a red div.\r\n</div>","exporting-components#Exporting Components":"You can export components from your MDX file.\nexport const MyButton = () => <button>Click me</button>","using-props#Using Props":"You can pass props to your components.\n<MyComponent title=\"Hello, MDX!\" />","custom-components#Custom Components":"You can define custom components within your MDX file.\nconst CustomComponent = () => <div>Custom Component</div>\r\n\r\n<CustomComponent />","mdxprovider#MDXProvider":"You can use MDXProvider to provide custom components for Markdown elements.\nimport { MDXProvider } from '@mdx-js/react'\r\n\r\nconst components = {\r\n  h1: (props) => <h1 style={{ color: 'tomato' }} {...props} />,\r\n}\r\n\r\n<MDXProvider components={components}>\r\n  <h1>Hello, MDX!</h1>\r\n</MDXProvider>","embedding-code-blocks#Embedding Code Blocks":"You can embed code blocks with syntax highlighting.\n`` `javascript\r\nconsole.log('Hello, MDX!')\r\n`` `","footnotes#Footnotes":"Here's a sentence with a footnote. This is the footnote.","definition-list#Definition List":"term\r\n: definition","strikethrough#Strikethrough":"The world is flat.","task-list#Task List":"Write the press release\nUpdate the website\nContact the media\nMDX Documentation\nMDX Syntax Highlighting\nMDX Provider\nMDX Components"}},"/Contribution/installingApplication":{"title":"Downloading Software","data":{"":"Contribution - FEDS201\nIn order to contribute to the FEDS-Handbook, you will need to install the following software:","#":"Git is a version control system that allows you to track changes in your code and collaborate with others. You can download Git from the official website: Git Client","-1#":"Node.js is a JavaScript runtime that allows you to run JavaScript code outside of a web browser. You can download Node.js from the official website: Node.Js","-2#":"VS Code is a lightweight code editor that supports a wide range of programming languages and extensions. You can download VS Code from the official website: VS Code\nLocate you downloaded files since you will need to install them in a specific order.","open-admin-poweshell#Open Admin Poweshell":"If you are using a Mac, Skip this Step.\nOpen the Windows Powershell as an administrator. You can do this by searching for \"Powershell\" in the Windows search bar, right-clicking on the Windows Powershell app, and selecting \"Run as administrator\".\nRun the following command:\nSet-ExecutionPolicy RemoteSigned\nPress Y to confirm the change.\nThis will allow you to run scripts on your computer,  Windows by default does not allow this for security reasons.\nRemoteSigned means that you can run your own scripts, but scripts from the internet will need to be signed by a trusted publisher.","install-git#Install Git":"Double click on the Git installer you downloaded earlier. Follow the installation instructions, and make sure to select the following options:\nUse Visual Studio Code as Git's default editor.\nSelect the default for the rest.\nUncheck the \"View Release Notes\" box.","install-nodejs#Install Node.js":"Double click on the Node.js installer you downloaded earlier. Follow the installation instructions, and make sure to select the following options:\nMake sure to check the box that says \"Automatically install the necessary tools...\"\nSelect the default for the rest.\nIt will take a few minutes to install the necessary tools. (It is normal for it open Terminal windows and Powershell)","install-vs-code#Install VS Code":"Double click on the VS Code installer you downloaded earlier. Follow the installation instructions, and make sure to select the following options:\nMake sure to check the box that says \"Add to PATH\".\nSelect the default for the rest.\nMake sure to restart your computer after installing all the software. This will ensure that all the changes take effect."}},"/Programming/Autonomous/PathPlanner/BuildAnAuton":{"title":"Building An Auton","data":{"download-pathplanner-lib#Download PathPlanner LIB":"PathPlannerLib can be added to your robot code project using the \"Install New Libraries (online)\" feature in VSCode using the following JSON file URL:\nhttps://3015rangerrobotics.github.io/pathplannerlib/PathplannerLib.json","configure-autobuilder#Configure AutoBuilder":"In PathPlannerLib, AutoBuilder is used to create full autonomous routines based on auto files created in the GUI app. In order for AutoBuilder to be able to build these auto routines, it must first be configured to control your robot.There are a few options for configuring AutoBuilder, one for each type of path following command: Holonomic, Ramsete, and LTV.\nSince all of the AutoBuilder configuration is related to the drive subsystem, it is recommended to configure AutoBuilder within your drive subsystem's constructor.\nThe following examples will assume that your drive subsystem has the following methods:\ngetPose - Returns the current robot pose as a Pose2d\nresetPose - Resets the robot's odometry to the given pose\ngetRobotRelativeSpeeds or getCurrentSpeeds - Returns the current robot-relative ChassisSpeeds. This can be calculated using one of WPILib's drive kinematics classes\ndriveRobotRelative or drive - Outputs commands to the robot's drive motors given robot-relative ChassisSpeeds. This can be converted to module states or wheel speeds using WPILib's drive kinematics classes.\nThe AutoBuilder configuration requires a method that will return true when a path should be flipped to the red side of the field. The origin of the field coordinate system will remain on the blue side.If you wish to have any other alliance color based transformation, you must implement it yourself by changing the data passed to, and received from, PathPlannerLib's path following commands.","holonomic-swerve#Holonomic (Swerve)":"public class DriveSubsystem extends SubsystemBase {\r\n  public DriveSubsystem() {\r\n    // All other subsystem initialization\r\n    // ...\r\n\r\n    // Load the RobotConfig from the GUI settings. You should probably\r\n    // store this in your Constants file\r\n    RobotConfig config;\r\n    try{\r\n      config = RobotConfig.fromGUISettings();\r\n    } catch (Exception e) {\r\n      // Handle exception as needed\r\n      e.printStackTrace();\r\n    }\r\n\r\n    // Configure AutoBuilder last\r\n    AutoBuilder.configure(\r\n            this::getPose, // Robot pose supplier\r\n            this::resetPose, // Method to reset odometry (will be called if your auto has a starting pose)\r\n            this::getRobotRelativeSpeeds, // ChassisSpeeds supplier. MUST BE ROBOT RELATIVE\r\n            (speeds, feedforwards) -> driveRobotRelative(speeds), // Method that will drive the robot given ROBOT RELATIVE ChassisSpeeds. Also optionally outputs individual module feedforwards\r\n            new PPHolonomicDriveController( // PPHolonomicController is the built in path following controller for holonomic drive trains\r\n                    new PIDConstants(5.0, 0.0, 0.0), // Translation PID constants\r\n                    new PIDConstants(5.0, 0.0, 0.0) // Rotation PID constants\r\n            ),\r\n            config, // The robot configuration\r\n            () -> {\r\n              // Boolean supplier that controls when the path will be mirrored for the red alliance\r\n              // This will flip the path being followed to the red side of the field.\r\n              // THE ORIGIN WILL REMAIN ON THE BLUE SIDE\r\n\r\n              var alliance = DriverStation.getAlliance();\r\n              if (alliance.isPresent()) {\r\n                return alliance.get() == DriverStation.Alliance.Red;\r\n              }\r\n              return false;\r\n            },\r\n            this // Reference to this subsystem to set requirements\r\n    );\r\n  }\r\n}","ltv-differential#LTV (Differential)":"public class DriveSubsystem extends SubsystemBase {\r\n  public DriveSubsystem() {\r\n    // All other subsystem initialization\r\n    // ...\r\n\r\n    // Load the RobotConfig from the GUI settings. You should probably\r\n    // store this in your Constants file\r\n    RobotConfig config;\r\n    try{\r\n      config = RobotConfig.fromGUISettings();\r\n    } catch (Exception e) {\r\n      // Handle exception as needed\r\n      e.printStackTrace();\r\n    }\r\n\r\n    // Configure AutoBuilder last\r\n    AutoBuilder.configure(\r\n            this::getPose, // Robot pose supplier\r\n            this::resetPose, // Method to reset odometry (will be called if your auto has a starting pose)\r\n            this::getRobotRelativeSpeeds, // ChassisSpeeds supplier. MUST BE ROBOT RELATIVE\r\n            (speeds, feedforwards) -> driveRobotRelative(speeds), // Method that will drive the robot given ROBOT RELATIVE ChassisSpeeds. Also optionally outputs individual module feedforwards\r\n            new PPLTVController(0.02), // PPLTVController is the built in path following controller for differential drive trains\r\n            config, // The robot configuration\r\n            () -> {\r\n              // Boolean supplier that controls when the path will be mirrored for the red alliance\r\n              // This will flip the path being followed to the red side of the field.\r\n              // THE ORIGIN WILL REMAIN ON THE BLUE SIDE\r\n\r\n              var alliance = DriverStation.getAlliance();\r\n              if (alliance.isPresent()) {\r\n                return alliance.get() == DriverStation.Alliance.Red;\r\n              }\r\n              return false;\r\n            },\r\n            this // Reference to this subsystem to set requirements\r\n    );\r\n  }\r\n}","load-an-auto#Load an Auto":"After you have configured the AutoBuilder, creating an auto is as simple as constructing a PathPlannerAuto with the name of the auto you made in the GUI.\nIt is highly recommended to create all of your autos when code starts, instead of creating them when you want to run them. Large delays can happen when loading complex autos/paths, so it is best to load them before they are needed.In the interest of simplicity, this example will show an auto being loaded in the getAutonomousCommand function, which is called when auto is enabled. This is not the recommended way to load your autos.\npublic class RobotContainer {\r\n  // ...\r\n\r\n  public Command getAutonomousCommand() {\r\n    return new PathPlannerAuto(\"Example Auto\");\r\n  }\r\n}","create-a-sendablechooser-with-all-autos-in-project#Create a SendableChooser with all autos in project":"After configuring the AutoBuilder, you have the option to build a SendableChooser that is automatically populated with every auto in the project.\nThis method will load all autos in the deploy directory. Since the deploy process does not automatically clear the deploy directory, old auto files that have since been deleted from the project could remain on the RIO, therefore being added to the auto chooser.To remove old options, the deploy directory will need to be cleared manually via SSH, WinSCP, reimaging the RIO, etc.\npublic class RobotContainer {\r\n  private final SendableChooser<Command> autoChooser;\r\n\r\n  public RobotContainer() {\r\n    // ...\r\n\r\n    // Build an auto chooser. This will use Commands.none() as the default option.\r\n    autoChooser = AutoBuilder.buildAutoChooser();\r\n\r\n    // Another option that allows you to specify the default auto by its name\r\n    // autoChooser = AutoBuilder.buildAutoChooser(\"My Default Auto\");\r\n\r\n    SmartDashboard.putData(\"Auto Chooser\", autoChooser);\r\n  }\r\n\r\n  public Command getAutonomousCommand() {\r\n    return autoChooser.getSelected();\r\n  }\r\n}","create-a-sendablechooser-with-certain-autos-in-project#Create a SendableChooser with certain autos in project":"Note\nThis feature is only available in the Java version of PathPlannerLib\nYou can use the buildAutoChooserWithOptionsModifier method to process the autos before they are shown on shuffle board\nBe careful using runtime values when generating AutoChooser, as RobotContainer is built at robot code startup. Things like FMS values may not be present at startup\npublic class RobotContainer {\r\n  private final SendableChooser<Command> autoChooser;\r\n\r\n  public RobotContainer() {\r\n    // ...\r\n\r\n    // For convenience a programmer could change this when going to competition.\r\n    boolean isCompetition = true;\r\n\r\n    // Build an auto chooser. This will use Commands.none() as the default option.\r\n    // As an example, this will only show autos that start with \"comp\" while at\r\n    // competition as defined by the programmer\r\n    autoChooser = AutoBuilder.buildAutoChooserWithOptionsModifier(\r\n      (stream) -> isCompetition\r\n        ? stream.filter(auto -> auto.getName().startsWith(\"comp\"))\r\n        : stream\r\n    );\r\n\r\n    SmartDashboard.putData(\"Auto Chooser\", autoChooser);\r\n  }\r\n\r\n  public Command getAutonomousCommand() {\r\n    return autoChooser.getSelected();\r\n  }\r\n}"}},"/Programming/InstallingNi":{"title":"FRC Game Tools Installation","data":{"installing-the-frc-game-tools#Installing the FRC Game Tools":"The FRC Game Tools contains the following software components:\nLabVIEW Update\nFRC Driver Station\nFRC roboRIO Imaging Tool and Images\nThe LabVIEW runtime components required for the Driver Station and Imaging Tool are included in this package.\nNote: No components from the LabVIEW Software for FRC package are required for running either the Driver Station or Imaging Tool.","requirements#Requirements":"Windows 10 or higher (Windows 10, 11)\nDownload the FRC Game Tools from National Instruments (NI).\nImportant: LabVIEW teams have already completed this step. Skip to the \"Installation\" section.","uninstall-old-versions-recommended#Uninstall Old Versions (Recommended)":"It is recommended to remove any old versions of the FRC Game Tools before installing the new version. Then:\nOpen the Start menu.\nSearch for \"Add or Remove Programs\".\nLocate the entry labeled \"NI Software\" and select \"Uninstall\".\nNote: It is only necessary to uninstall previous versions when installing a new year's tools.","select-components-to-uninstall#Select Components to Uninstall":"In the dialog box, select all entries to uninstall. Click \"Remove\" and wait for the uninstaller to complete. Reboot if prompted.","installation#Installation":"Important: The Game Tools installer may prompt that .NET Framework 4.6.2 needs to be updated or installed. Follow the on-screen instructions.","extraction#Extraction":"There are two options for extraction:Online\nRun the downloaded executable file.\nClick \"Yes\" if a Windows Security prompt appears.\nOffline (Windows 10+)\nRight-click on the downloaded ISO file and select \"Mount\".\nRun install.exe from the mounted ISO.\nClick \"Yes\" if a Windows Security prompt appears.\nNote: If you cannot mount the ISO file, install 7-Zip and use that to extract the ISO.","ni-package-manager-license#NI Package Manager License":"Click \"Next\" to confirm you agree to the NI Package Manager License agreement.","disable-windows-fast-startup#Disable Windows Fast Startup":"It is recommended to leave this screen as-is and click \"Next\". Disabling Windows Fast Startup can cause issues with imaging the roboRIO.","ni-package-manager-review#NI Package Manager Review":"Click \"Next\" if you see a screen showing what is about to be installed.","ni-package-manager-installation#NI Package Manager Installation":"This window will track the installation progress of the NI Package Manager.","additional-software#Additional Software":"Leave all of the additional packages selected and click \"Next\".","license-agreements#License Agreements":"Select \"I accept...\"\nClick \"Next\".","review-summary#Review Summary":"Click \"Next\".","detail-progress#Detail Progress":"Click \"Next\" when the installation process is finished.","reboot-to-complete-installation#Reboot to Complete Installation":"If prompted, select \"Reboot Now\" after closing any open programs."}}}